// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const CreateApp = `-- name: CreateApp :exec
INSERT INTO apps (id, name, repo_url, language, port, container_id, image_id, status, error_msg, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateAppParams struct {
	ID          string         `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	RepoUrl     string         `db:"repo_url" json:"repo_url"`
	Language    sql.NullString `db:"language" json:"language"`
	Port        int64          `db:"port" json:"port"`
	ContainerID sql.NullString `db:"container_id" json:"container_id"`
	ImageID     sql.NullString `db:"image_id" json:"image_id"`
	Status      sql.NullString `db:"status" json:"status"`
	ErrorMsg    sql.NullString `db:"error_msg" json:"error_msg"`
	UpdatedAt   sql.NullTime   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) error {
	_, err := q.exec(ctx, q.createAppStmt, CreateApp,
		arg.ID,
		arg.Name,
		arg.RepoUrl,
		arg.Language,
		arg.Port,
		arg.ContainerID,
		arg.ImageID,
		arg.Status,
		arg.ErrorMsg,
		arg.UpdatedAt,
	)
	return err
}

const DeleteApp = `-- name: DeleteApp :exec
DELETE FROM apps WHERE id = ?
`

func (q *Queries) DeleteApp(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteAppStmt, DeleteApp, id)
	return err
}

const GetAllApps = `-- name: GetAllApps :many
SELECT id, name, repo_url, language, port, container_id, image_id,
    status, error_msg, created_at, updated_at
FROM apps
`

func (q *Queries) GetAllApps(ctx context.Context) ([]App, error) {
	rows, err := q.query(ctx, q.getAllAppsStmt, GetAllApps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RepoUrl,
			&i.Language,
			&i.Port,
			&i.ContainerID,
			&i.ImageID,
			&i.Status,
			&i.ErrorMsg,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetApp = `-- name: GetApp :one
SELECT id, name, repo_url, language, port, container_id, image_id, status, error_msg, created_at, updated_at FROM apps WHERE id = ?
`

func (q *Queries) GetApp(ctx context.Context, id string) (App, error) {
	row := q.queryRow(ctx, q.getAppStmt, GetApp, id)
	var i App
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RepoUrl,
		&i.Language,
		&i.Port,
		&i.ContainerID,
		&i.ImageID,
		&i.Status,
		&i.ErrorMsg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetAppByRepoUrl = `-- name: GetAppByRepoUrl :one
SELECT id, name, repo_url, language, port, container_id, image_id, status, error_msg, created_at, updated_at FROM apps WHERE repo_url = ?
`

func (q *Queries) GetAppByRepoUrl(ctx context.Context, repoUrl string) (App, error) {
	row := q.queryRow(ctx, q.getAppByRepoUrlStmt, GetAppByRepoUrl, repoUrl)
	var i App
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RepoUrl,
		&i.Language,
		&i.Port,
		&i.ContainerID,
		&i.ImageID,
		&i.Status,
		&i.ErrorMsg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateApp = `-- name: UpdateApp :exec
UPDATE apps SET name = ?, repo_url = ?, language = ?, port = ?, container_id = ?, image_id = ?, status = ?, error_msg = ?, updated_at = ? WHERE id = ?
`

type UpdateAppParams struct {
	Name        string         `db:"name" json:"name"`
	RepoUrl     string         `db:"repo_url" json:"repo_url"`
	Language    sql.NullString `db:"language" json:"language"`
	Port        int64          `db:"port" json:"port"`
	ContainerID sql.NullString `db:"container_id" json:"container_id"`
	ImageID     sql.NullString `db:"image_id" json:"image_id"`
	Status      sql.NullString `db:"status" json:"status"`
	ErrorMsg    sql.NullString `db:"error_msg" json:"error_msg"`
	UpdatedAt   sql.NullTime   `db:"updated_at" json:"updated_at"`
	ID          string         `db:"id" json:"id"`
}

func (q *Queries) UpdateApp(ctx context.Context, arg UpdateAppParams) error {
	_, err := q.exec(ctx, q.updateAppStmt, UpdateApp,
		arg.Name,
		arg.RepoUrl,
		arg.Language,
		arg.Port,
		arg.ContainerID,
		arg.ImageID,
		arg.Status,
		arg.ErrorMsg,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
