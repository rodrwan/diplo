// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAppStmt, err = db.PrepareContext(ctx, CreateApp); err != nil {
		return nil, fmt.Errorf("error preparing query CreateApp: %w", err)
	}
	if q.deleteAppStmt, err = db.PrepareContext(ctx, DeleteApp); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteApp: %w", err)
	}
	if q.getAllAppsStmt, err = db.PrepareContext(ctx, GetAllApps); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllApps: %w", err)
	}
	if q.getAppStmt, err = db.PrepareContext(ctx, GetApp); err != nil {
		return nil, fmt.Errorf("error preparing query GetApp: %w", err)
	}
	if q.getAppByRepoUrlStmt, err = db.PrepareContext(ctx, GetAppByRepoUrl); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppByRepoUrl: %w", err)
	}
	if q.updateAppStmt, err = db.PrepareContext(ctx, UpdateApp); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateApp: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAppStmt != nil {
		if cerr := q.createAppStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppStmt: %w", cerr)
		}
	}
	if q.deleteAppStmt != nil {
		if cerr := q.deleteAppStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppStmt: %w", cerr)
		}
	}
	if q.getAllAppsStmt != nil {
		if cerr := q.getAllAppsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAppsStmt: %w", cerr)
		}
	}
	if q.getAppStmt != nil {
		if cerr := q.getAppStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppStmt: %w", cerr)
		}
	}
	if q.getAppByRepoUrlStmt != nil {
		if cerr := q.getAppByRepoUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppByRepoUrlStmt: %w", cerr)
		}
	}
	if q.updateAppStmt != nil {
		if cerr := q.updateAppStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAppStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createAppStmt       *sql.Stmt
	deleteAppStmt       *sql.Stmt
	getAllAppsStmt      *sql.Stmt
	getAppStmt          *sql.Stmt
	getAppByRepoUrlStmt *sql.Stmt
	updateAppStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createAppStmt:       q.createAppStmt,
		deleteAppStmt:       q.deleteAppStmt,
		getAllAppsStmt:      q.getAllAppsStmt,
		getAppStmt:          q.getAppStmt,
		getAppByRepoUrlStmt: q.getAppByRepoUrlStmt,
		updateAppStmt:       q.updateAppStmt,
	}
}
