package templates

templ DockerEvents() {
    <div class="form-section">
        <h2>Configuraci√≥n de Deployment</h2>
        <div class="form-group">
            <label for="appName">Nombre de la Aplicaci√≥n:</label>
            <input type="text" id="appName" placeholder="mi-aplicacion" value="test-app-web-example">
        </div>
        <div class="form-group">
            <label for="repoUrl">URL del Repositorio:</label>
            <input type="url" id="repoUrl" placeholder="https://github.com/usuario/repo" value="https://github.com/rodrwan/web-example">
        </div>
        <button onclick="startDeployment()" id="deployBtn" class="btn btn-primary">üöÄ Iniciar Deployment</button>
    </div>

    <div class="form-section">
        <h2>Estado de Conexi√≥n</h2>
        <p>
            <span class="status-indicator" id="statusIndicator"></span>
            <span id="statusText">Desconectado</span>
        </p>
        <button onclick="connectSSE()" id="connectBtn" class="btn btn-secondary">üì° Conectar SSE</button>
        <button onclick="disconnectSSE()" id="disconnectBtn" class="btn btn-danger" style="display: none;">‚ùå Desconectar</button>
    </div>

    <div class="logs-section" id="logsContainer">
        <div class="log-entry log-info">
            <strong>üìã Sistema</strong> - P√°gina cargada. Listo para monitorear eventos Docker.
        </div>
    </div>

    <style>
        .form-section {
            background: #2d2d2d;
            padding: 25px;
            border-radius: 10px;
            margin-bottom: 30px;
            border: 1px solid #444;
        }
        .form-section h2 {
            color: #ecf0f1;
            margin-bottom: 20px;
            font-size: 1.3em;
        }
        .logs-section {
            background: #0f0f0f;
            border-radius: 10px;
            padding: 20px;
            margin-top: 30px;
            height: 500px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            border: 1px solid #444;
        }
        .log-entry {
            color: #e0e0e0;
            margin-bottom: 8px;
            padding: 8px;
            border-radius: 5px;
            border-left: 4px solid #444;
        }
        .log-info {
            background: rgba(52, 152, 219, 0.1);
            border-left-color: #3498db;
            color: #3498db;
        }
        .log-success {
            background: rgba(39, 174, 96, 0.1);
            border-left-color: #27ae60;
            color: #27ae60;
        }
        .log-error {
            background: rgba(231, 76, 60, 0.1);
            border-left-color: #e74c3c;
            color: #e74c3c;
        }
        .log-warning {
            background: rgba(243, 156, 18, 0.1);
            border-left-color: #f39c12;
            color: #f39c12;
        }
        .docker-event {
            background: rgba(155, 89, 182, 0.1);
            border-left-color: #9b59b6;
            color: #9b59b6;
        }
        .event-details {
            margin-top: 10px;
            padding: 10px;
            background: rgba(255,255,255,0.05);
            border-radius: 5px;
            font-size: 12px;
        }
        .event-data {
            color: #bdc3c7;
            margin-top: 5px;
        }
    </style>

    <script>
        let eventSource = null;
        let currentAppId = null;

        function updateStatus(status, text) {
            const indicator = document.getElementById('statusIndicator');
            const statusText = document.getElementById('statusText');

            indicator.className = 'status-indicator status-' + status;
            statusText.textContent = text;
        }

        function addLogEntry(message, type = 'info', data = null) {
            const logsContainer = document.getElementById('logsContainer');
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${type}`;

            const timestamp = new Date().toLocaleTimeString();
            let content = `<strong>‚è∞ ${timestamp}</strong> - ${message}`;

            if (data) {
                content += `<div class="event-details">
                    <div class="event-data"><strong>Datos:</strong> ${JSON.stringify(data, null, 2)}</div>
                </div>`;
            }

            logEntry.innerHTML = content;
            logsContainer.appendChild(logEntry);
            logsContainer.scrollTop = logsContainer.scrollHeight;
        }

        function connectSSE() {
            if (eventSource) {
                eventSource.close();
            }

            updateStatus('connecting', 'Conectando...');

            // Verificar que tenemos un App ID v√°lido
            if (!currentAppId) {
                addLogEntry('Error: No hay una aplicaci√≥n activa. Inicia un deployment primero.', 'error');
                updateStatus('disconnected', 'Sin aplicaci√≥n');
                return;
            }

            // Usar el App ID actual para la conexi√≥n SSE
            eventSource = new EventSource(`/api/v1/apps/${currentAppId}/logs`);

            eventSource.onopen = function() {
                updateStatus('connected', 'Conectado');
                document.getElementById('connectBtn').style.display = 'none';
                document.getElementById('disconnectBtn').style.display = 'inline-block';
                addLogEntry('Conexi√≥n SSE establecida', 'success');
            };

            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);

                    if (data.type === 'docker_event') {
                        addLogEntry(`üê≥ ${data.message}`, 'docker-event', data.data);
                    } else if (data.type === 'log') {
                        addLogEntry(`üìù ${data.message}`, 'info');
                    } else if (data.type === 'success') {
                        addLogEntry(`‚úÖ ${data.message}`, 'success');
                    } else if (data.type === 'error') {
                        addLogEntry(`‚ùå ${data.message}`, 'error');
                    } else if (data.type === 'warning') {
                        addLogEntry(`‚ö†Ô∏è ${data.message}`, 'warning');
                    } else {
                        addLogEntry(`‚ÑπÔ∏è ${data.message}`, 'info');
                    }
                } catch (error) {
                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');
                }
            };

            eventSource.onerror = function() {
                updateStatus('disconnected', 'Error de conexi√≥n');
                addLogEntry('Error en la conexi√≥n SSE', 'error');
            };
        }

        function disconnectSSE() {
            if (eventSource) {
                eventSource.close();
                eventSource = null;
            }
            updateStatus('disconnected', 'Desconectado');
            document.getElementById('connectBtn').style.display = 'inline-block';
            document.getElementById('disconnectBtn').style.display = 'none';
            addLogEntry('Conexi√≥n SSE cerrada', 'info');
        }

        async function startDeployment() {
            const appName = document.getElementById('appName').value;
            const repoUrl = document.getElementById('repoUrl').value;

            if (!appName || !repoUrl) {
                addLogEntry('Por favor, completa todos los campos', 'error');
                return;
            }

            const deployBtn = document.getElementById('deployBtn');
            deployBtn.disabled = true;
            deployBtn.textContent = '‚è≥ Deploying...';

            addLogEntry(`Iniciando deployment de: ${appName}`, 'info');

            try {
                const response = await fetch('/api/v1/deploy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: appName,
                        repo_url: repoUrl
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    currentAppId = result.id;
                    addLogEntry(`Deployment iniciado. App ID: ${result.id}`, 'success');
                    addLogEntry(`URL: ${result.url}`, 'info');

                    // Conectar autom√°ticamente al SSE
                    setTimeout(() => {
                        connectSSE();
                    }, 1000);
                } else {
                    addLogEntry(`Error en deployment: ${result.message || 'Error desconocido'}`, 'error');
                }
            } catch (error) {
                addLogEntry(`Error de red: ${error.message}`, 'error');
            } finally {
                deployBtn.disabled = false;
                deployBtn.textContent = 'üöÄ Iniciar Deployment';
            }
        }

        // Inicializar estado
        document.addEventListener('DOMContentLoaded', function() {
            updateStatus('disconnected', 'Desconectado');
        });
    </script>
}