package templates

templ DockerEvents() {
    <div class="deployment-header">
        <h1>üöÄ Deployment Center</h1>
        <p>Despliega aplicaciones autom√°ticamente desde repositorios Git</p>
    </div>

    <!-- Sistema de Status -->
    <div class="status-section">
        <div class="status-card" id="systemStatus">
            <h3>üìä Estado del Sistema</h3>
            <div class="status-grid">
                <div class="status-item">
                    <span class="status-label">Runtime Preferido:</span>
                    <span class="status-value" id="preferredRuntime">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Runtimes Disponibles:</span>
                    <span class="status-value" id="availableRuntimes">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Lenguajes Soportados:</span>
                    <span class="status-value" id="supportedLanguages">-</span>
                </div>
            </div>
        </div>
        <div class="status-card">
            <h3>üîó Conexi√≥n SSE</h3>
            <div class="connection-status">
                <span class="status-indicator" id="statusIndicator"></span>
                <span id="statusText">Desconectado</span>
            </div>
            <div class="connection-actions">
                <button onclick="connectSSE()" id="connectBtn" class="btn btn-secondary">üì° Conectar</button>
                <button onclick="disconnectSSE()" id="disconnectBtn" class="btn btn-danger" style="display: none;">‚ùå Desconectar</button>
            </div>
        </div>
    </div>

    <!-- Formulario de Deployment Mejorado -->
    <div class="deployment-form">
        <h2>‚öôÔ∏è Configuraci√≥n de Deployment</h2>

        <div class="form-row">
            <div class="form-group">
                <label for="appName">Nombre de la Aplicaci√≥n:</label>
                <input type="text" id="appName" placeholder="mi-aplicacion" value="test-app-web-example">
            </div>
            <div class="form-group">
                <label for="repoUrl">URL del Repositorio:</label>
                <input type="url" id="repoUrl" placeholder="https://github.com/usuario/repo" value="https://github.com/rodrwan/web-example">
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="runtimeType">Runtime:</label>
                <select id="runtimeType">
                    <option value="">ü§ñ Auto-detectar (Recomendado)</option>
                    <option value="docker">üê≥ Docker</option>
                    <option value="lxc">üì¶ LXC</option>
                    <option value="containerd">üèóÔ∏è containerd</option>
                </select>
            </div>
            <div class="form-group">
                <label for="languageHint">Lenguaje (Opcional):</label>
                <select id="languageHint">
                    <option value="">üîç Auto-detectar</option>
                    <option value="go">Go</option>
                    <option value="javascript">JavaScript/Node.js</option>
                    <option value="python">Python</option>
                    <option value="rust">Rust</option>
                    <option value="java">Java</option>
                </select>
            </div>
        </div>

        <!-- Variables de Entorno -->
        <div class="env-vars-section">
            <h3>üîß Variables de Entorno</h3>
            <div class="env-vars-help">
                <p>Define variables de entorno que estar√°n disponibles en el contenedor de tu aplicaci√≥n.</p>
            </div>
            <div id="envVarsContainer">
                <div class="env-var-row">
                    <input type="text" placeholder="NOMBRE_VARIABLE" class="env-key">
                    <input type="text" placeholder="valor" class="env-value">
                    <button onclick="removeEnvVar(this)" class="btn btn-danger btn-sm">‚ùå</button>
                </div>
            </div>
            <div class="env-actions">
                <button onclick="addEnvVar()" class="btn btn-secondary btn-sm">‚ûï Agregar Variable</button>
                <button onclick="clearEnvVars()" class="btn btn-warning btn-sm">üóëÔ∏è Limpiar Todo</button>
            </div>
        </div>

        <div class="deployment-actions">
            <button onclick="startDeployment()" id="deployBtn" class="btn btn-primary">
                üöÄ Iniciar Deployment
            </button>
            <button onclick="validateRepo()" id="validateBtn" class="btn btn-secondary">
                üîç Validar Repositorio
            </button>
        </div>
    </div>

    <!-- Logs Section Mejorada -->
    <div class="logs-section" id="logsContainer">
        <div class="logs-header">
            <h3>üìã Logs de Deployment</h3>
            <div class="logs-controls">
                <button onclick="clearLogs()" class="btn btn-secondary btn-sm">üóëÔ∏è Limpiar</button>
                <button onclick="exportLogs()" class="btn btn-secondary btn-sm">üì• Exportar</button>
            </div>
        </div>
        <div class="logs-content" id="logsContent">
            <div class="log-entry log-info">
                <strong>üìã Sistema</strong> - Deployment Center cargado. Listo para deployments.
            </div>
        </div>
    </div>

    <style>
        .deployment-header {
            text-align: center;
            margin-bottom: 30px;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: #ecf0f1;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        }
        .deployment-header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        .deployment-header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .status-section {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        .status-card {
            background: #2d2d2d;
            padding: 25px;
            border-radius: 10px;
            border: 1px solid #444;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }
        .status-card h3 {
            color: #ecf0f1;
            margin-bottom: 15px;
            font-size: 1.2em;
        }
        .status-grid {
            display: grid;
            gap: 10px;
        }
        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #444;
        }
        .status-item:last-child {
            border-bottom: none;
        }
        .status-label {
            color: #bdc3c7;
            font-weight: 500;
        }
        .status-value {
            color: #3498db;
            font-family: 'Courier New', monospace;
            font-weight: 600;
        }
        .connection-status {
            margin-bottom: 15px;
            padding: 10px;
            background: #1a1a1a;
            border-radius: 5px;
            text-align: center;
        }
        .connection-actions {
            text-align: center;
        }

        .deployment-form {
            background: #2d2d2d;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            border: 1px solid #444;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }
        .deployment-form h2 {
            color: #ecf0f1;
            margin-bottom: 25px;
            font-size: 1.4em;
        }
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #ecf0f1;
        }
        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #444;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            background: #1a1a1a;
            color: #e0e0e0;
        }
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #3498db;
        }
        .deployment-actions {
            text-align: center;
            margin-top: 30px;
        }
        .deployment-actions .btn {
            margin: 0 10px;
            padding: 15px 30px;
            font-size: 1.1em;
        }

        /* Estilos para Variables de Entorno */
        .env-vars-section {
            margin-top: 30px;
            padding: 25px;
            background: #1a1a1a;
            border-radius: 10px;
            border: 1px solid #444;
        }
        .env-vars-section h3 {
            color: #ecf0f1;
            margin-bottom: 15px;
            font-size: 1.2em;
        }
        .env-vars-help {
            margin-bottom: 20px;
            padding: 10px;
            background: #2d2d2d;
            border-radius: 5px;
            border-left: 4px solid #3498db;
        }
        .env-vars-help p {
            color: #bdc3c7;
            margin: 0;
            font-size: 0.9em;
        }
        .env-var-row {
            display: grid;
            grid-template-columns: 1fr 1fr auto;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
        }
        .env-key, .env-value {
            padding: 8px 12px;
            border: 1px solid #444;
            border-radius: 5px;
            background: #2d2d2d;
            color: #e0e0e0;
            font-size: 14px;
        }
        .env-key {
            font-family: 'Courier New', monospace;
            text-transform: uppercase;
        }
        .env-key:focus, .env-value:focus {
            outline: none;
            border-color: #3498db;
        }
        .env-actions {
            margin-top: 15px;
            text-align: center;
        }
        .env-actions .btn {
            margin: 0 5px;
            padding: 8px 15px;
            font-size: 0.9em;
        }

        .logs-section {
            background: #1a1a1a;
            border-radius: 15px;
            border: 1px solid #444;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        .logs-header {
            background: linear-gradient(135deg, #34495e 0%, #2c3e50 100%);
            color: #ecf0f1;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logs-header h3 {
            margin: 0;
            font-size: 1.3em;
        }
        .logs-controls {
            display: flex;
            gap: 10px;
        }
        .logs-content {
            background: #0f0f0f;
            padding: 20px;
            height: 500px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.6;
        }
        .log-entry {
            color: #e0e0e0;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            border-left: 4px solid #444;
            background: rgba(255,255,255,0.02);
        }
        .log-info {
            border-left-color: #3498db;
            background: rgba(52, 152, 219, 0.1);
        }
        .log-success {
            border-left-color: #27ae60;
            background: rgba(39, 174, 96, 0.1);
        }
        .log-error {
            border-left-color: #e74c3c;
            background: rgba(231, 76, 60, 0.1);
        }
        .log-warning {
            border-left-color: #f39c12;
            background: rgba(243, 156, 18, 0.1);
        }
        .docker-event {
            border-left-color: #9b59b6;
            background: rgba(155, 89, 182, 0.1);
        }
        .btn-sm {
            padding: 8px 16px;
            font-size: 14px;
        }
        .event-details {
            margin-top: 10px;
            padding: 10px;
            background: rgba(255,255,255,0.05);
            border-radius: 5px;
            font-size: 12px;
        }
        .event-data {
            color: #bdc3c7;
            margin-top: 5px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .status-section {
                grid-template-columns: 1fr;
            }
            .form-row {
                grid-template-columns: 1fr;
            }
            .deployment-actions .btn {
                display: block;
                margin: 10px 0;
            }
        }
    </style>

    <script>
        let eventSource = null;
        let currentAppId = null;
        let systemStatus = null;

        // Inicializar p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            loadSystemStatus();
            updateStatus('disconnected', 'Desconectado');
        });

        // Cargar estado del sistema
        async function loadSystemStatus() {
            try {
                const response = await fetch('/api/unified/status');
                const data = await response.json();
                systemStatus = data.data;

                document.getElementById('preferredRuntime').textContent = systemStatus.runtime.preferred || 'N/A';
                document.getElementById('availableRuntimes').textContent = systemStatus.runtime.available.join(', ') || 'N/A';
                document.getElementById('supportedLanguages').textContent = systemStatus.runtime.supported_languages.join(', ') || 'N/A';

                // Actualizar opciones de runtime basado en disponibilidad
                updateRuntimeOptions(systemStatus.runtime.available);

                addLogEntry('‚úÖ Estado del sistema cargado', 'success');
            } catch (error) {
                console.error('Error cargando estado del sistema:', error);
                addLogEntry('‚ùå Error cargando estado del sistema', 'error');
            }
        }

        // Actualizar opciones de runtime
        function updateRuntimeOptions(availableRuntimes) {
            const select = document.getElementById('runtimeType');
            const options = select.getElementsByTagName('option');

            for (let i = 1; i < options.length; i++) {
                const option = options[i];
                const runtimeType = option.value;

                if (availableRuntimes.includes(runtimeType)) {
                    option.disabled = false;
                    option.textContent = option.textContent.replace(' (No disponible)', '');
                } else {
                    option.disabled = true;
                    option.textContent = option.textContent + ' (No disponible)';
                }
            }
        }

        // Validar repositorio
        async function validateRepo() {
            const repoUrl = document.getElementById('repoUrl').value;
            if (!repoUrl) {
                addLogEntry('‚ùå Por favor ingresa una URL de repositorio', 'error');
                return;
            }

            addLogEntry('üîç Validando repositorio...', 'info');

            try {
                // Simulaci√≥n de validaci√≥n (aqu√≠ podr√≠as hacer una llamada real)
                await new Promise(resolve => setTimeout(resolve, 1000));
                addLogEntry('‚úÖ Repositorio v√°lido', 'success');
            } catch (error) {
                addLogEntry('‚ùå Error validando repositorio', 'error');
            }
        }

        // Actualizar estado de conexi√≥n
        function updateStatus(status, text) {
            const indicator = document.getElementById('statusIndicator');
            const statusText = document.getElementById('statusText');

            indicator.className = 'status-indicator status-' + status;
            statusText.textContent = text;
        }

        // Agregar entrada de log
        function addLogEntry(message, type = 'info', data = null) {
            const logsContent = document.getElementById('logsContent');
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${type}`;

            const timestamp = new Date().toLocaleTimeString();
            let content = `<strong>‚è∞ ${timestamp}</strong> - ${message}`;

            if (data) {
                content += `<div class="event-details">
                    <div class="event-data"><strong>Datos:</strong> ${JSON.stringify(data, null, 2)}</div>
                </div>`;
            }

            logEntry.innerHTML = content;
            logsContent.appendChild(logEntry);
            logsContent.scrollTop = logsContent.scrollHeight;
        }

        // Limpiar logs
        function clearLogs() {
            const logsContent = document.getElementById('logsContent');
            logsContent.innerHTML = '';
            addLogEntry('üóëÔ∏è Logs limpiados', 'info');
        }

        // Exportar logs
        function exportLogs() {
            const logs = document.getElementById('logsContent').innerText;
            const blob = new Blob([logs], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `diplo-logs-${new Date().toISOString().split('T')[0]}.txt`;
            a.click();
            URL.revokeObjectURL(url);
            addLogEntry('üì• Logs exportados', 'success');
        }

        // Conectar SSE
        function connectSSE() {
            if (eventSource) {
                eventSource.close();
            }

            updateStatus('connecting', 'Conectando...');

            if (!currentAppId) {
                addLogEntry('Error: No hay una aplicaci√≥n activa. Inicia un deployment primero.', 'error');
                updateStatus('disconnected', 'Sin aplicaci√≥n');
                return;
            }

            eventSource = new EventSource(`/api/v1/apps/${currentAppId}/logs`);

            eventSource.onopen = function() {
                updateStatus('connected', 'Conectado');
                document.getElementById('connectBtn').style.display = 'none';
                document.getElementById('disconnectBtn').style.display = 'inline-block';
                addLogEntry('‚úÖ Conexi√≥n SSE establecida', 'success');
            };

            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);

                    if (data.type === 'docker_event') {
                        addLogEntry(`üê≥ ${data.message}`, 'docker-event', data.data);
                    } else if (data.type === 'log') {
                        addLogEntry(`üìù ${data.message}`, 'info');
                    } else if (data.type === 'success') {
                        addLogEntry(`‚úÖ ${data.message}`, 'success');
                    } else if (data.type === 'error') {
                        addLogEntry(`‚ùå ${data.message}`, 'error');
                    } else if (data.type === 'warning') {
                        addLogEntry(`‚ö†Ô∏è ${data.message}`, 'warning');
                    } else {
                        addLogEntry(`‚ÑπÔ∏è ${data.message}`, 'info');
                    }
                } catch (error) {
                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');
                }
            };

            eventSource.onerror = function() {
                updateStatus('disconnected', 'Error de conexi√≥n');
                addLogEntry('‚ùå Error en la conexi√≥n SSE', 'error');
            };
        }

        // Desconectar SSE
        function disconnectSSE() {
            if (eventSource) {
                eventSource.close();
                eventSource = null;
            }
            updateStatus('disconnected', 'Desconectado');
            document.getElementById('connectBtn').style.display = 'inline-block';
            document.getElementById('disconnectBtn').style.display = 'none';
            addLogEntry('üîå Conexi√≥n SSE cerrada', 'info');
        }

        // Funciones para Variables de Entorno
        function addEnvVar() {
            const container = document.getElementById('envVarsContainer');
            const row = document.createElement('div');
            row.className = 'env-var-row';
            row.innerHTML = `
                <input type="text" placeholder="NOMBRE_VARIABLE" class="env-key">
                <input type="text" placeholder="valor" class="env-value">
                <button onclick="removeEnvVar(this)" class="btn btn-danger btn-sm">‚ùå</button>
            `;
            container.appendChild(row);
        }

        function removeEnvVar(button) {
            const row = button.parentElement;
            row.remove();
        }

        function clearEnvVars() {
            const container = document.getElementById('envVarsContainer');
            container.innerHTML = `
                <div class="env-var-row">
                    <input type="text" placeholder="NOMBRE_VARIABLE" class="env-key">
                    <input type="text" placeholder="valor" class="env-value">
                    <button onclick="removeEnvVar(this)" class="btn btn-danger btn-sm">‚ùå</button>
                </div>
            `;
        }

        function getEnvVars() {
            const rows = document.querySelectorAll('.env-var-row');
            const envVars = [];

            rows.forEach(row => {
                const key = row.querySelector('.env-key').value.trim();
                const value = row.querySelector('.env-value').value.trim();

                if (key && value) {
                    envVars.push({
                        name: key,
                        value: value
                    });
                }
            });

            return envVars;
        }

        // Iniciar deployment
        async function startDeployment() {
            const appName = document.getElementById('appName').value;
            const repoUrl = document.getElementById('repoUrl').value;
            const runtimeType = document.getElementById('runtimeType').value;
            const languageHint = document.getElementById('languageHint').value;
            const envVars = getEnvVars();

            if (!appName || !repoUrl) {
                addLogEntry('‚ùå Por favor completa todos los campos requeridos', 'error');
                return;
            }

            const deployBtn = document.getElementById('deployBtn');
            deployBtn.disabled = true;
            deployBtn.textContent = 'üîÑ Deployando...';

            addLogEntry('üöÄ Iniciando deployment...', 'info');
            if (envVars.length > 0) {
                addLogEntry(`üîß Variables de entorno configuradas: ${envVars.length}`, 'info');
            }

            try {
                const payload = {
                    name: appName,
                    repo_url: repoUrl,
                    env_vars: envVars
                };

                if (runtimeType) {
                    payload.runtime_type = runtimeType;
                }

                if (languageHint) {
                    payload.language = languageHint;
                }

                const response = await fetch('/api/v1/deploy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (response.ok) {
                    currentAppId = result.data.id;
                    addLogEntry(`‚úÖ Deployment iniciado: ${result.data.id}`, 'success');
                    addLogEntry(`üéØ Runtime seleccionado: ${result.data.runtime_type}`, 'info');
                    if (result.data.env_vars > 0) {
                        addLogEntry(`üîß Variables de entorno aplicadas: ${result.data.env_vars}`, 'success');
                    }

                    // Auto-conectar SSE
                    setTimeout(() => {
                        connectSSE();
                    }, 1000);
                } else {
                    addLogEntry(`‚ùå Error en deployment: ${result.message}`, 'error');
                }
            } catch (error) {
                addLogEntry(`‚ùå Error de conexi√≥n: ${error.message}`, 'error');
            } finally {
                deployBtn.disabled = false;
                deployBtn.textContent = 'üöÄ Iniciar Deployment';
            }
        }
    </script>
}