// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Logs() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"controls\"><input type=\"text\" id=\"appId\" placeholder=\"ID de la aplicación (ej: app_1234567890_123456)\" value=\"\"> <button onclick=\"connectSSE()\" id=\"connectBtn\" class=\"btn btn-primary\">Conectar</button> <button onclick=\"disconnectSSE()\" id=\"disconnectBtn\" class=\"btn btn-secondary\" disabled>Desconectar</button> <button onclick=\"clearLogs()\" id=\"clearBtn\" class=\"btn btn-warning\">Limpiar Logs</button></div><div id=\"status\" class=\"status disconnected\">Estado: Desconectado</div><div class=\"logs-container\" id=\"logsContainer\"><div class=\"log-entry\"><span class=\"timestamp\">[Inicio]</span> <span class=\"log-info\">Esperando conexión...</span></div></div><style>\n        .controls {\n            padding: 20px;\n            border-bottom: 1px solid #333;\n            display: flex;\n            gap: 10px;\n            align-items: center;\n            background: #2d2d2d;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n        .controls input[type=\"text\"] {\n            flex: 1;\n            margin: 0;\n        }\n        .status {\n            padding: 15px;\n            margin: 15px 0;\n            border-radius: 8px;\n            font-weight: bold;\n            text-align: center;\n        }\n        .status.connected {\n            background: rgba(39, 174, 96, 0.2);\n            color: #27ae60;\n            border: 1px solid #27ae60;\n        }\n        .status.disconnected {\n            background: rgba(231, 76, 60, 0.2);\n            color: #e74c3c;\n            border: 1px solid #e74c3c;\n        }\n        .status.connecting {\n            background: rgba(243, 156, 18, 0.2);\n            color: #f39c12;\n            border: 1px solid #f39c12;\n        }\n    </style><script>\n        let eventSource = null;\n        let isConnected = false;\n\n        function updateStatus(message, type) {\n            const statusEl = document.getElementById('status');\n            statusEl.textContent = `Estado: ${message}`;\n            statusEl.className = `status ${type}`;\n        }\n\n        function addLogEntry(message, type = 'info', timestamp = null) {\n            const container = document.getElementById('logsContainer');\n            const entry = document.createElement('div');\n            entry.className = 'log-entry';\n\n            const time = timestamp || new Date().toLocaleTimeString();\n            const logClass = `log-${type}`;\n\n            entry.innerHTML = `\n                <span class=\"timestamp\">[${time}]</span>\n                <span class=\"${logClass}\">${message}</span>\n            `;\n\n            container.appendChild(entry);\n            container.scrollTop = container.scrollHeight;\n        }\n\n        function connectSSE() {\n            const appId = document.getElementById('appId').value.trim();\n            if (!appId) {\n                alert('Por favor ingresa un ID de aplicación');\n                return;\n            }\n\n            if (eventSource) {\n                eventSource.close();\n            }\n\n            updateStatus('Conectando...', 'connecting');\n\n            const url = `/api/v1/apps/${appId}/logs`;\n            eventSource = new EventSource(url);\n\n            eventSource.onopen = function(event) {\n                isConnected = true;\n                updateStatus('Conectado', 'connected');\n                document.getElementById('connectBtn').disabled = true;\n                document.getElementById('disconnectBtn').disabled = false;\n                addLogEntry('Conexión SSE establecida', 'success');\n            };\n\n            eventSource.onmessage = function(event) {\n                try {\n                    const data = JSON.parse(event.data);\n                    addLogEntry(data.message, data.type, new Date(data.timestamp).toLocaleTimeString());\n                } catch (error) {\n                    addLogEntry(`Error parsing message: ${event.data}`, 'error');\n                }\n            };\n\n            eventSource.onerror = function(event) {\n                isConnected = false;\n                updateStatus('Error de conexión', 'disconnected');\n                document.getElementById('connectBtn').disabled = false;\n                document.getElementById('disconnectBtn').disabled = true;\n                addLogEntry('Error en la conexión SSE', 'error');\n                if (eventSource) {\n                    eventSource.close();\n                }\n            };\n        }\n\n        function disconnectSSE() {\n            if (eventSource) {\n                eventSource.close();\n                eventSource = null;\n            }\n            isConnected = false;\n            updateStatus('Desconectado', 'disconnected');\n            document.getElementById('connectBtn').disabled = false;\n            document.getElementById('disconnectBtn').disabled = true;\n            addLogEntry('Conexión cerrada', 'info');\n        }\n\n        function clearLogs() {\n            const container = document.getElementById('logsContainer');\n            container.innerHTML = '<div class=\"log-entry\"><span class=\"timestamp\">[Inicio]</span> <span class=\"log-info\">Logs limpiados</span></div>';\n        }\n\n        // Ejemplo de uso automático\n        document.addEventListener('DOMContentLoaded', function() {\n            // Simular un ID de aplicación para testing\n            document.getElementById('appId').value = 'app_' + Date.now() + '_' + Math.floor(Math.random() * 1000000);\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
