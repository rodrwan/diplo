package templates

templ Layout() {
    <!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diplo - Logs en Tiempo Real</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }
        .controls {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            gap: 10px;
            align-items: center;
        }
        input[type="text"] {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            flex: 1;
        }
        button {
            padding: 10px 20px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.3s;
        }
        button:hover {
            background: #5a6fd8;
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .logs-container {
            height: 500px;
            overflow-y: auto;
            padding: 20px;
            background: #1e1e1e;
            color: #f8f8f2;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.4;
        }
        .log-entry {
            margin-bottom: 5px;
            padding: 2px 0;
        }
        .log-info {
            color: #87ceeb;
        }
        .log-success {
            color: #90ee90;
        }
        .log-error {
            color: #ff6b6b;
        }
        .log-warning {
            color: #ffd700;
        }
        .timestamp {
            color: #888;
            font-size: 12px;
        }
        .status {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            font-weight: bold;
        }
        .status.connected {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .status.disconnected {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .status.connecting {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Diplo - Logs en Tiempo Real</h1>
            <p>Monitoreo de deployments y logs de contenedores</p>
        </div>

        <div class="controls">
            <input type="text" id="appId" placeholder="ID de la aplicación (ej: app_1234567890_123456)" value="">
            <button onclick="connectSSE()" id="connectBtn">Conectar</button>
            <button onclick="disconnectSSE()" id="disconnectBtn" disabled>Desconectar</button>
            <button onclick="clearLogs()" id="clearBtn">Limpiar Logs</button>
        </div>

        <div id="status" class="status disconnected">
            Estado: Desconectado
        </div>

        <div class="logs-container" id="logsContainer">
            <div class="log-entry">
                <span class="timestamp">[Inicio]</span>
                <span class="log-info">Esperando conexión...</span>
            </div>
        </div>
    </div>

    <script>
        let eventSource = null;
        let isConnected = false;

        function updateStatus(message, type) {
            const statusEl = document.getElementById('status');
            statusEl.textContent = `Estado: ${message}`;
            statusEl.className = `status ${type}`;
        }

        function addLogEntry(message, type = 'info', timestamp = null) {
            const container = document.getElementById('logsContainer');
            const entry = document.createElement('div');
            entry.className = 'log-entry';

            const time = timestamp || new Date().toLocaleTimeString();
            const logClass = `log-${type}`;

            entry.innerHTML = `
                <span class="timestamp">[${time}]</span>
                <span class="${logClass}">${message}</span>
            `;

            container.appendChild(entry);
            container.scrollTop = container.scrollHeight;
        }

        function connectSSE() {
            const appId = document.getElementById('appId').value.trim();
            if (!appId) {
                alert('Por favor ingresa un ID de aplicación');
                return;
            }

            if (eventSource) {
                eventSource.close();
            }

            updateStatus('Conectando...', 'connecting');

            const url = `http://localhost:8080/api/v1/apps/${appId}/logs`;
            eventSource = new EventSource(url);

            eventSource.onopen = function(event) {
                isConnected = true;
                updateStatus('Conectado', 'connected');
                document.getElementById('connectBtn').disabled = true;
                document.getElementById('disconnectBtn').disabled = false;
                addLogEntry('Conexión SSE establecida', 'success');
            };

            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    addLogEntry(data.message, data.type, new Date(data.timestamp).toLocaleTimeString());
                } catch (error) {
                    addLogEntry(`Error parsing message: ${event.data}`, 'error');
                }
            };

            eventSource.onerror = function(event) {
                isConnected = false;
                updateStatus('Error de conexión', 'disconnected');
                document.getElementById('connectBtn').disabled = false;
                document.getElementById('disconnectBtn').disabled = true;
                addLogEntry('Error en la conexión SSE', 'error');
                eventSource.close();
            };
        }

        function disconnectSSE() {
            if (eventSource) {
                eventSource.close();
                eventSource = null;
            }
            isConnected = false;
            updateStatus('Desconectado', 'disconnected');
            document.getElementById('connectBtn').disabled = false;
            document.getElementById('disconnectBtn').disabled = true;
            addLogEntry('Conexión cerrada', 'info');
        }

        function clearLogs() {
            const container = document.getElementById('logsContainer');
            container.innerHTML = '<div class="log-entry"><span class="timestamp">[Inicio]</span> <span class="log-info">Logs limpiados</span></div>';
        }

        // Ejemplo de uso automático
        window.onload = function() {
            // Simular un ID de aplicación para testing
            document.getElementById('appId').value = 'app_' + Date.now() + '_' + Math.floor(Math.random() * 1000000);
        };
    </script>
</body>
</html>
}