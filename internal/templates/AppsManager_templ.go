// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func AppsManager() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"stats-section\" id=\"statsSection\"><div class=\"stat-card\"><div class=\"stat-number\" id=\"totalApps\">-</div><div class=\"stat-label\">Total Apps</div></div><div class=\"stat-card\"><div class=\"stat-number\" id=\"runningApps\">-</div><div class=\"stat-label\">Ejecut√°ndose</div></div><div class=\"stat-card\"><div class=\"stat-number\" id=\"deployingApps\">-</div><div class=\"stat-label\">Deployando</div></div><div class=\"stat-card\"><div class=\"stat-number\" id=\"errorApps\">-</div><div class=\"stat-label\">Con Errores</div></div></div><div class=\"apps-grid\" id=\"appsGrid\"><div class=\"loading\"><h3>üîÑ Cargando aplicaciones...</h3></div></div><!-- Modal para logs --><div class=\"logs-modal\" id=\"logsModal\"><div class=\"logs-content\"><div class=\"logs-header\"><h3 id=\"modalTitle\">Logs de Aplicaci√≥n</h3><button class=\"close-btn\" onclick=\"closeLogsModal()\">&times;</button></div><div class=\"logs-body\" id=\"modalLogs\"><div class=\"log-entry log-info\">Conectando a los logs...</div></div></div></div><!-- Botones flotantes --><div class=\"floating-buttons\"><button class=\"refresh-btn\" onclick=\"loadApps()\" title=\"Actualizar aplicaciones\">üîÑ</button> <button class=\"maintenance-btn\" onclick=\"openMaintenanceMenu()\" title=\"Mantenimiento del sistema\">üîß</button></div><!-- Men√∫ de mantenimiento --><div class=\"maintenance-menu\" id=\"maintenanceMenu\"><div class=\"maintenance-content\"><h3>üîß Mantenimiento del Sistema</h3><div class=\"maintenance-actions\"><button onclick=\"pruneImages()\" class=\"btn btn-warning\">üóëÔ∏è Limpiar Im√°genes</button> <button onclick=\"restartAllApps()\" class=\"btn btn-danger\">üîÑ Reiniciar Todas</button> <button onclick=\"exportAppsData()\" class=\"btn btn-secondary\">üì• Exportar Datos</button> <button onclick=\"closeMaintenanceMenu()\" class=\"btn btn-secondary\">‚ùå Cerrar</button></div></div></div><style>\n        .stats-section {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        .stat-card {\n            background: #2d2d2d;\n            padding: 20px;\n            border-radius: 10px;\n            text-align: center;\n            border-left: 4px solid #3498db;\n            border: 1px solid #444;\n        }\n        .stat-number {\n            font-size: 2em;\n            font-weight: bold;\n            color: #3498db;\n        }\n        .stat-label {\n            color: #bdc3c7;\n            margin-top: 5px;\n        }\n        .apps-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        .app-card {\n            background: #2d2d2d;\n            border: 1px solid #444;\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\n        }\n        .app-card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 20px rgba(0,0,0,0.5);\n            border-color: #555;\n        }\n        .app-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 15px;\n        }\n        .app-name {\n            font-size: 1.2em;\n            font-weight: 600;\n            color: #ecf0f1;\n        }\n        .app-status {\n            padding: 4px 12px;\n            border-radius: 20px;\n            font-size: 0.8em;\n            font-weight: 600;\n            text-transform: uppercase;\n        }\n        .status-running {\n            background: #27ae60;\n            color: #ecf0f1;\n        }\n        .status-deploying {\n            background: #f39c12;\n            color: #2c3e50;\n        }\n        .status-error {\n            background: #e74c3c;\n            color: #ecf0f1;\n        }\n        .status-stopped {\n            background: #7f8c8d;\n            color: #ecf0f1;\n        }\n        .app-details {\n            margin-bottom: 15px;\n        }\n        .detail-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 8px;\n            font-size: 0.9em;\n        }\n        .detail-label {\n            color: #bdc3c7;\n            font-weight: 500;\n        }\n        .detail-value {\n            color: #ecf0f1;\n            font-family: 'Courier New', monospace;\n        }\n        .app-actions {\n            display: flex;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n        .logs-modal {\n            display: none;\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0,0,0,0.9);\n            z-index: 1000;\n        }\n        .logs-content {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 90%;\n            max-width: 800px;\n            height: 80%;\n            background: #1a1a1a;\n            border-radius: 15px;\n            overflow: hidden;\n            border: 1px solid #444;\n        }\n        .logs-header {\n            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n            color: #ecf0f1;\n            padding: 20px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        .logs-body {\n            height: calc(100% - 80px);\n            background: #0f0f0f;\n            color: #e0e0e0;\n            font-family: 'Courier New', monospace;\n            font-size: 14px;\n            padding: 20px;\n            overflow-y: auto;\n            border-top: 1px solid #444;\n        }\n        .log-entry {\n            margin-bottom: 5px;\n            padding: 2px 0;\n        }\n        .log-info { color: #3498db; }\n        .log-success { color: #27ae60; }\n        .log-error { color: #e74c3c; }\n        .log-warning { color: #f39c12; }\n        .docker-event { color: #9b59b6; }\n        .close-btn {\n            background: none;\n            border: none;\n            color: #ecf0f1;\n            font-size: 1.5em;\n            cursor: pointer;\n            padding: 0;\n            width: 30px;\n            height: 30px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .loading {\n            text-align: center;\n            padding: 40px;\n            color: #bdc3c7;\n        }\n        .empty-state {\n            text-align: center;\n            padding: 60px 20px;\n            color: #bdc3c7;\n        }\n        .empty-state h3 {\n            margin-bottom: 10px;\n            color: #ecf0f1;\n        }\n        .empty-state a {\n            color: #3498db;\n            text-decoration: none;\n        }\n        .empty-state a:hover {\n            text-decoration: underline;\n        }\n        .floating-buttons {\n            position: fixed;\n            bottom: 30px;\n            right: 30px;\n            display: flex;\n            flex-direction: column;\n            gap: 15px;\n            z-index: 1000;\n        }\n        .refresh-btn, .maintenance-btn {\n            width: 60px;\n            height: 60px;\n            border: none;\n            border-radius: 50%;\n            font-size: 1.5em;\n            cursor: pointer;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.4);\n            transition: all 0.3s ease;\n            color: #ecf0f1;\n        }\n        .refresh-btn {\n            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n        }\n        .maintenance-btn {\n            background: linear-gradient(135deg, #e67e22 0%, #f39c12 100%);\n        }\n        .refresh-btn:hover, .maintenance-btn:hover {\n            transform: scale(1.1);\n            box-shadow: 0 6px 25px rgba(0,0,0,0.5);\n        }\n        .maintenance-menu {\n            display: none;\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0,0,0,0.8);\n            z-index: 2000;\n            align-items: center;\n            justify-content: center;\n        }\n        .maintenance-content {\n            background: #2d2d2d;\n            padding: 30px;\n            border-radius: 15px;\n            border: 1px solid #444;\n            text-align: center;\n            min-width: 400px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.5);\n        }\n        .maintenance-content h3 {\n            color: #ecf0f1;\n            margin-bottom: 20px;\n            font-size: 1.4em;\n        }\n        .maintenance-actions {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 15px;\n        }\n        .maintenance-actions .btn {\n            padding: 12px 20px;\n            font-size: 1em;\n        }\n        .notification {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 15px 20px;\n            border-radius: 8px;\n            color: #ecf0f1;\n            font-weight: 600;\n            z-index: 1001;\n            transform: translateX(400px);\n            transition: transform 0.3s ease;\n        }\n        .notification.show {\n            transform: translateX(0);\n        }\n        .notification.success {\n            background: #27ae60;\n        }\n        .notification.error {\n            background: #e74c3c;\n        }\n        .notification.warning {\n            background: #f39c12;\n            color: #2c3e50;\n        }\n    </style><script>\n        let apps = [];\n        let eventSource = null;\n        let currentModalAppId = null;\n\n        // Funci√≥n para mostrar notificaciones\n        function showNotification(message, type = 'success') {\n            const notification = document.createElement('div');\n            notification.className = `notification ${type}`;\n            notification.textContent = message;\n            document.body.appendChild(notification);\n\n            setTimeout(() => notification.classList.add('show'), 100);\n            setTimeout(() => {\n                notification.classList.remove('show');\n                setTimeout(() => document.body.removeChild(notification), 300);\n            }, 3000);\n        }\n\n        // Funci√≥n para cargar aplicaciones\n        async function loadApps() {\n            try {\n                const response = await fetch('/api/v1/apps');\n                if (response.ok) {\n                    apps = await response.json();\n                    updateStats();\n                    renderApps();\n                } else {\n                    showNotification('Error cargando aplicaciones', 'error');\n                }\n            } catch (error) {\n                showNotification('Error de conexi√≥n', 'error');\n            }\n        }\n\n        // Funci√≥n para actualizar estad√≠sticas\n        function updateStats() {\n            const stats = {\n                total: apps.data.length,\n                running: apps.data.filter((app) => app.status === 'running').length,\n                deploying: apps.data.filter((app) => app.status === 'deploying').length,\n                error: apps.data.filter((app) => app.status === 'error').length\n            };\n\n            document.getElementById('totalApps').textContent = stats.total;\n            document.getElementById('runningApps').textContent = stats.running;\n            document.getElementById('deployingApps').textContent = stats.deploying;\n            document.getElementById('errorApps').textContent = stats.error;\n        }\n\n        // Funci√≥n para renderizar aplicaciones\n        function renderApps() {\n            const grid = document.getElementById('appsGrid');\n\n            if (apps.data.length === 0) {\n                grid.innerHTML = `\n                    <div class=\"empty-state\">\n                        <h3>üì≠ No hay aplicaciones</h3>\n                        <p>A√∫n no has desplegado ninguna aplicaci√≥n.</p>\n                        <p>Ve a <a href=\"/deploy\">Deployment</a> para crear tu primera app.</p>\n                    </div>\n                `;\n                return;\n            }\n\n            grid.innerHTML = apps.data.map((app) => {\n                const appError = app.error_msg ? `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Error:</span>\n                            <span class=\"detail-value\" style=\"color: #e74c3c;\">${app.error_msg}</span>\n                        </div>\n                        ` : '';\n\n                const appUrl = app.status === 'running' ? `\n                            <a href=\"http://localhost:${app.port}\" target=\"_blank\" class=\"btn btn-primary\">üåê Abrir</a>\n                        ` : '';\n\n                return `\n                <div class=\"app-card\">\n                    <div class=\"app-header\">\n                        <div class=\"app-name\">${app.name || 'Sin nombre'}</div>\n                        <div class=\"app-status status-${app.status}\">${getStatusText(app.status)}</div>\n                    </div>\n                    <div class=\"app-details\">\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">ID:</span>\n                            <span class=\"detail-value\">${app.id}</span>\n                        </div>\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Puerto:</span>\n                            <span class=\"detail-value\">${app.port || 'N/A'}</span>\n                        </div>\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">URL:</span>\n                            <span class=\"detail-value\">http://localhost:${app.port || 'N/A'}</span>\n                        </div>\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Lenguaje:</span>\n                            <span class=\"detail-value\">${app.language || 'N/A'}</span>\n                        </div>\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Runtime:</span>\n                            <span class=\"detail-value\">${app.runtime_type || 'Docker'}</span>\n                        </div>\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Repo:</span>\n                            <span class=\"detail-value\">${app.repo_url || 'N/A'}</span>\n                        </div>\n                        ${appError}\n                    </div>\n                    <div class=\"app-actions\">\n                        ${appUrl}\n                        <button onclick=\"viewLogs('${app.id}', '${app.name}')\" class=\"btn btn-secondary\">üìã Logs</button>\n                        <button onclick=\"checkHealth('${app.id}')\" class=\"btn btn-success\">üîç Health Check</button>\n                        <button onclick=\"redeployApp('${app.id}')\" class=\"btn btn-warning\">üîÑ Redeploy</button>\n                        <button onclick=\"deleteApp('${app.id}', '${app.name}')\" class=\"btn btn-danger\">üóëÔ∏è Eliminar</button>\n                    </div>\n                </div>\n            `;\n            }).join('');\n        }\n\n        // Funci√≥n para obtener texto del estado\n        function getStatusText(status) {\n            const statusMap = {\n                'running': 'Ejecut√°ndose',\n                'deploying': 'Deployando',\n                'error': 'Error',\n                'stopped': 'Detenido'\n            };\n            return statusMap[status] || status;\n        }\n\n        // Funci√≥n para ver logs\n        function viewLogs(appId, appName) {\n            currentModalAppId = appId;\n            document.getElementById('modalTitle').textContent = `Logs de ${appName}`;\n            document.getElementById('modalLogs').innerHTML = '<div class=\"log-entry log-info\">Conectando a los logs...</div>';\n            document.getElementById('logsModal').style.display = 'block';\n\n            // Conectar SSE para logs\n            if (eventSource) {\n                eventSource.close();\n            }\n\n            eventSource = new EventSource(`/api/v1/apps/${appId}/logs`);\n\n            eventSource.onmessage = function(event) {\n                try {\n                    const data = JSON.parse(event.data);\n                    addLogEntry(data.message, data.type);\n                } catch (error) {\n                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');\n                }\n            };\n\n            eventSource.onerror = function() {\n                addLogEntry('Error en la conexi√≥n SSE', 'error');\n            };\n        }\n\n        // Funci√≥n para agregar entrada de log\n        function addLogEntry(message, type = 'info') {\n            const logsContainer = document.getElementById('modalLogs');\n            const entry = document.createElement('div');\n            entry.className = `log-entry log-${type}`;\n\n            const timestamp = new Date().toLocaleTimeString();\n            entry.textContent = `[${timestamp}] ${message}`;\n\n            logsContainer.appendChild(entry);\n            logsContainer.scrollTop = logsContainer.scrollHeight;\n        }\n\n        // Funci√≥n para cerrar modal de logs\n        function closeLogsModal() {\n            if (eventSource) {\n                eventSource.close();\n                eventSource = null;\n            }\n            document.getElementById('logsModal').style.display = 'none';\n            currentModalAppId = null;\n        }\n\n        // Funci√≥n para redeploy\n        async function redeployApp(appId) {\n            if (!confirm('¬øEst√°s seguro de que quieres hacer redeploy de esta aplicaci√≥n?')) {\n                return;\n            }\n\n            try {\n                const app = apps.data.find(a => a.id === appId);\n                if (!app) {\n                    showNotification('Aplicaci√≥n no encontrada', 'error');\n                    return;\n                }\n\n                const response = await fetch('/api/v1/deploy', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: app.name,\n                        repo_url: app.repo_url\n                    })\n                });\n\n                if (response.ok) {\n                    showNotification('Redeploy iniciado correctamente', 'success');\n                    setTimeout(loadApps, 2000); // Recargar despu√©s de 2 segundos\n                } else {\n                    const error = await response.json();\n                    showNotification(`Error en redeploy: ${error.message}`, 'error');\n                }\n            } catch (error) {\n                showNotification(`Error de red: ${error.message}`, 'error');\n            }\n        }\n\n        // Funci√≥n para eliminar aplicaci√≥n\n        async function deleteApp(appId, appName) {\n            if (!confirm('¬øEst√°s seguro de que quieres eliminar la aplicaci√≥n \"' + appName + '\"?')) {\n                return;\n            }\n\n            try {\n                const response = await fetch('/api/v1/apps/' + appId, {\n                    method: 'DELETE'\n                });\n\n                if (response.ok) {\n                    showNotification('Aplicaci√≥n eliminada correctamente', 'success');\n                    loadApps(); // Recargar lista\n                } else {\n                    const error = await response.json();\n                    showNotification('Error eliminando aplicaci√≥n: ' + error.message, 'error');\n                }\n            } catch (error) {\n                showNotification('Error de red: ' + error.message, 'error');\n            }\n        }\n\n        // Funci√≥n para health check\n        async function checkHealth(appId) {\n            try {\n                const app = apps.data.find(a => a.id === appId);\n                if (!app) {\n                    showNotification('Aplicaci√≥n no encontrada', 'error');\n                    return;\n                }\n\n                if (app.status !== 'running') {\n                    showNotification('La aplicaci√≥n no est√° ejecut√°ndose', 'warning');\n                    return;\n                }\n\n                showNotification('Verificando salud de la aplicaci√≥n...', 'info');\n\n                // Intentar hacer request HTTP a la aplicaci√≥n\n                const healthResponse = await fetch('http://localhost:' + app.port + '/health', {\n                    method: 'GET',\n                    timeout: 5000\n                });\n\n                if (healthResponse.ok) {\n                    showNotification('‚úÖ Aplicaci√≥n saludable', 'success');\n                } else {\n                    showNotification('‚ö†Ô∏è Aplicaci√≥n responde pero con errores', 'warning');\n                }\n            } catch (error) {\n                // Si no puede conectar, intentar un ping b√°sico\n                try {\n                    const app = apps.data.find(a => a.id === appId);\n                    const pingResponse = await fetch('http://localhost:' + app.port, {\n                        method: 'GET',\n                        timeout: 5000\n                    });\n\n                    if (pingResponse.ok) {\n                        showNotification('‚úÖ Aplicaci√≥n responde correctamente', 'success');\n                    } else {\n                        showNotification('‚ùå Aplicaci√≥n no responde correctamente', 'error');\n                    }\n                } catch (pingError) {\n                    showNotification('‚ùå No se puede conectar a la aplicaci√≥n', 'error');\n                }\n            }\n        }\n\n        // Funci√≥n para limpiar im√°genes\n        async function pruneImages() {\n            if (!confirm('¬øEst√°s seguro de que quieres limpiar las im√°genes no utilizadas?')) {\n                return;\n            }\n\n            try {\n                showNotification('Limpiando im√°genes...', 'info');\n\n                const response = await fetch('/api/v1/maintenance/prune-images', {\n                    method: 'POST'\n                });\n\n                const result = await response.json();\n\n                if (response.ok) {\n                    showNotification('‚úÖ Im√°genes limpiadas exitosamente', 'success');\n                } else {\n                    showNotification('‚ùå Error limpiando im√°genes: ' + result.message, 'error');\n                }\n            } catch (error) {\n                showNotification('‚ùå Error de conexi√≥n: ' + error.message, 'error');\n            }\n        }\n\n        // Funci√≥n para reiniciar aplicaci√≥n\n        async function restartApp(appId) {\n            if (!confirm('¬øEst√°s seguro de que quieres reiniciar esta aplicaci√≥n?')) {\n                return;\n            }\n\n            try {\n                const app = apps.data.find(a => a.id === appId);\n                if (!app) {\n                    showNotification('Aplicaci√≥n no encontrada', 'error');\n                    return;\n                }\n\n                showNotification('Reiniciando aplicaci√≥n...', 'info');\n\n                // Primero hacer redeploy para reiniciar\n                const response = await fetch('/api/v1/deploy', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: app.name,\n                        repo_url: app.repo_url\n                    })\n                });\n\n                if (response.ok) {\n                    showNotification('‚úÖ Aplicaci√≥n reiniciada correctamente', 'success');\n                    setTimeout(loadApps, 2000);\n                } else {\n                    const error = await response.json();\n                    showNotification('‚ùå Error reiniciando aplicaci√≥n: ' + error.message, 'error');\n                }\n            } catch (error) {\n                showNotification('‚ùå Error de red: ' + error.message, 'error');\n            }\n        }\n\n        // Cargar aplicaciones al iniciar\n        document.addEventListener('DOMContentLoaded', function() {\n            loadApps();\n\n            // Recargar autom√°ticamente cada 30 segundos\n            setInterval(loadApps, 30000);\n        });\n\n        // Funciones para el men√∫ de mantenimiento\n        function openMaintenanceMenu() {\n            document.getElementById('maintenanceMenu').style.display = 'flex';\n        }\n\n        function closeMaintenanceMenu() {\n            document.getElementById('maintenanceMenu').style.display = 'none';\n        }\n\n        // Funci√≥n para reiniciar todas las aplicaciones\n        async function restartAllApps() {\n            if (!confirm('¬øEst√°s seguro de que quieres reiniciar TODAS las aplicaciones?')) {\n                return;\n            }\n\n            closeMaintenanceMenu();\n            showNotification('Reiniciando todas las aplicaciones...', 'info');\n\n            const runningApps = apps.data.filter(app => app.status === 'running');\n\n            for (const app of runningApps) {\n                try {\n                    await fetch('/api/v1/deploy', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({\n                            name: app.name,\n                            repo_url: app.repo_url\n                        })\n                    });\n                } catch (error) {\n                    console.error('Error reiniciando app:', app.name, error);\n                }\n            }\n\n            showNotification('Reinicio masivo iniciado', 'success');\n            setTimeout(loadApps, 3000);\n        }\n\n        // Funci√≥n para exportar datos de aplicaciones\n        function exportAppsData() {\n            const data = {\n                timestamp: new Date().toISOString(),\n                total_apps: apps.data.length,\n                stats: {\n                    running: apps.data.filter(app => app.status === 'running').length,\n                    deploying: apps.data.filter(app => app.status === 'deploying').length,\n                    error: apps.data.filter(app => app.status === 'error').length\n                },\n                applications: apps.data\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = 'diplo-apps-' + new Date().toISOString().split('T')[0] + '.json';\n            a.click();\n            URL.revokeObjectURL(url);\n\n            closeMaintenanceMenu();\n            showNotification('Datos exportados exitosamente', 'success');\n        }\n\n        // Cerrar modal con Escape\n        document.addEventListener('keydown', function(event) {\n            if (event.key === 'Escape') {\n                closeLogsModal();\n                closeMaintenanceMenu();\n            }\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
