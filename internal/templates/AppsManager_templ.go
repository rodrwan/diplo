// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func AppsManager() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5 mb-8\" id=\"statsSection\"><div class=\"card\"><div class=\"text-4xl font-bold text-blue-500\" id=\"totalApps\">-</div><div class=\"text-gray-400 mt-2\">Total Apps</div></div><div class=\"card\"><div class=\"text-4xl font-bold text-green-500\" id=\"runningApps\">-</div><div class=\"text-gray-400 mt-2\">Ejecutándose</div></div><div class=\"card\"><div class=\"text-4xl font-bold text-yellow-500\" id=\"deployingApps\">-</div><div class=\"text-gray-400 mt-2\">Deployando</div></div><div class=\"card\"><div class=\"text-4xl font-bold text-red-500\" id=\"errorApps\">-</div><div class=\"text-gray-400 mt-2\">Con Errores</div></div></div><div class=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-8\" id=\"appsGrid\"><div class=\"flex items-center justify-center p-8\"><h3 class=\"text-xl text-gray-400\">🔄 Cargando aplicaciones...</h3></div></div><!-- Modal para logs --><div class=\"fixed inset-0 bg-black bg-opacity-50 hidden z-50\" id=\"logsModal\"><div class=\"flex items-center justify-center min-h-screen p-4\"><div class=\"bg-gray-800 rounded-lg shadow-2xl w-full max-w-4xl max-h-[80vh] overflow-hidden\"><div class=\"flex justify-between items-center p-6 border-b border-gray-600\"><h3 class=\"text-xl font-semibold text-white\" id=\"modalTitle\">Logs de Aplicación</h3><button class=\"text-gray-400 hover:text-white text-2xl font-bold\" onclick=\"closeLogsModal()\">&times;</button></div><div class=\"p-6 overflow-y-auto max-h-[60vh]\" id=\"modalLogs\"><div class=\"log-entry log-info\">Conectando a los logs...</div></div></div></div></div><!-- Botones flotantes --><div class=\"fixed bottom-6 right-6 flex flex-col gap-2 z-40\"><button class=\"w-10 h-10 rounded-full bg-blue-600 hover:bg-blue-500 text-white shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center text-lg hover:scale-105\" onclick=\"loadApps()\" title=\"Actualizar aplicaciones\">🔄</button> <button class=\"w-10 h-10 rounded-full bg-gray-600 hover:bg-gray-500 text-white shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center text-lg hover:scale-105\" onclick=\"openMaintenanceMenu()\" title=\"Mantenimiento del sistema\">🔧</button></div><!-- Modal para vista detallada de aplicación --><div class=\"fixed inset-0 bg-black bg-opacity-50 hidden z-50\" id=\"appDetailsModal\"><div class=\"flex items-center justify-center min-h-screen p-4\"><div class=\"bg-gray-800 rounded-lg shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-hidden\"><div class=\"flex justify-between items-center p-6 border-b border-gray-600\"><h3 class=\"text-xl font-semibold text-white\" id=\"appDetailsTitle\">Detalles de Aplicación</h3><button class=\"text-gray-400 hover:text-white text-2xl font-bold\" onclick=\"closeAppDetailsModal()\">&times;</button></div><div class=\"p-6\"><div class=\"flex border-b border-gray-600 mb-6\"><button class=\"tab-button active px-4 py-2 text-white border-b-2 border-blue-500\" onclick=\"showDetailsTab('general')\">📋 General</button> <button class=\"tab-button px-4 py-2 text-gray-400 hover:text-white border-b-2 border-transparent\" onclick=\"showDetailsTab('env')\">🔧 Variables de Entorno</button> <button class=\"tab-button px-4 py-2 text-gray-400 hover:text-white border-b-2 border-transparent\" onclick=\"showDetailsTab('logs')\">📜 Logs</button></div><div class=\"details-content\"><div id=\"generalTab\" class=\"tab-content active\"><div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\" id=\"appDetailsGrid\"><!-- Se llena dinámicamente --></div></div><div id=\"envTab\" class=\"tab-content hidden\"><div class=\"space-y-6\"><div class=\"flex gap-4\"><button onclick=\"showAddEnvVarForm()\" class=\"btn btn-primary\">➕ Agregar Variable</button> <button onclick=\"refreshEnvVars()\" class=\"btn btn-secondary\">🔄 Actualizar</button></div><div class=\"space-y-3\" id=\"envVarsList\"><!-- Se llena dinámicamente --></div></div></div><div id=\"logsTab\" class=\"tab-content hidden\"><div class=\"logs-container\" id=\"detailsLogsContainer\"><div class=\"log-entry log-info\">Conectando a los logs...</div></div></div></div></div></div></div></div><!-- Modal para agregar/editar variable de entorno --><div class=\"fixed inset-0 bg-black bg-opacity-50 hidden z-50\" id=\"envVarModal\"><div class=\"flex items-center justify-center min-h-screen p-4\"><div class=\"bg-gray-800 rounded-lg shadow-2xl w-full max-w-md\"><div class=\"flex justify-between items-center p-6 border-b border-gray-600\"><h3 class=\"text-xl font-semibold text-white\" id=\"envVarModalTitle\">Agregar Variable de Entorno</h3><button class=\"text-gray-400 hover:text-white text-2xl font-bold\" onclick=\"closeEnvVarModal()\">&times;</button></div><div class=\"p-6\"><form id=\"envVarForm\" class=\"space-y-4\"><div class=\"form-group\"><label for=\"envVarKey\" class=\"form-label\">Nombre de la Variable:</label> <input type=\"text\" id=\"envVarKey\" placeholder=\"MI_VARIABLE\" required class=\"form-input\"></div><div class=\"form-group\"><label for=\"envVarValue\" class=\"form-label\">Valor:</label> <input type=\"text\" id=\"envVarValue\" placeholder=\"mi_valor\" required class=\"form-input\"></div><div class=\"form-group\"><label class=\"flex items-center space-x-2\"><input type=\"checkbox\" id=\"envVarIsSecret\" class=\"rounded\"> <span class=\"text-gray-200\">Marcar como secreto</span></label></div><div class=\"flex gap-3 pt-4\"><button type=\"submit\" class=\"btn btn-primary flex-1\">💾 Guardar</button> <button type=\"button\" onclick=\"closeEnvVarModal()\" class=\"btn btn-secondary flex-1\">❌ Cancelar</button></div></form></div></div></div></div><!-- Menú de mantenimiento --><div class=\"fixed inset-0 bg-black bg-opacity-50 hidden z-50\" id=\"maintenanceMenu\"><div class=\"flex items-center justify-center min-h-screen p-4\"><div class=\"bg-gray-800 rounded-lg shadow-2xl w-full max-w-md\"><div class=\"p-6\"><h3 class=\"text-xl font-semibold text-white mb-6\">🔧 Mantenimiento del Sistema</h3><div class=\"space-y-3\"><button onclick=\"pruneImages()\" class=\"btn btn-warning w-full\">🗑️ Limpiar Imágenes</button> <button onclick=\"restartAllApps()\" class=\"btn btn-danger w-full\">🔄 Reiniciar Todas</button> <button onclick=\"exportAppsData()\" class=\"btn btn-secondary w-full\">📥 Exportar Datos</button> <button onclick=\"closeMaintenanceMenu()\" class=\"btn btn-secondary w-full\">❌ Cerrar</button></div></div></div></div></div><script>\n        let apps = [];\n        let eventSource = null;\n        let currentModalAppId = null;\n\n        // Función para mostrar notificaciones\n        function showNotification(message, type = 'success') {\n            const notification = document.createElement('div');\n            notification.className = `notification ${type}`;\n            notification.textContent = message;\n            document.body.appendChild(notification);\n\n            setTimeout(() => notification.classList.add('show'), 100);\n            setTimeout(() => {\n                notification.classList.remove('show');\n                setTimeout(() => document.body.removeChild(notification), 300);\n            }, 3000);\n        }\n\n        // Función para cargar aplicaciones\n        async function loadApps() {\n            try {\n                const response = await fetch('/api/v1/apps');\n                if (response.ok) {\n                    apps = await response.json();\n                    updateStats();\n                    renderApps();\n                } else {\n                    showNotification('Error cargando aplicaciones', 'error');\n                }\n            } catch (error) {\n                showNotification('Error de conexión', 'error');\n            }\n        }\n\n        // Función para actualizar estadísticas\n        function updateStats() {\n            const stats = {\n                total: apps.data.length,\n                running: apps.data.filter((app) => app.status === 'running').length,\n                deploying: apps.data.filter((app) => app.status === 'deploying').length,\n                error: apps.data.filter((app) => app.status === 'error').length\n            };\n\n            document.getElementById('totalApps').textContent = stats.total;\n            document.getElementById('runningApps').textContent = stats.running;\n            document.getElementById('deployingApps').textContent = stats.deploying;\n            document.getElementById('errorApps').textContent = stats.error;\n        }\n\n        // Función para renderizar aplicaciones\n        function renderApps() {\n            const grid = document.getElementById('appsGrid');\n\n            if (apps.data.length === 0) {\n                grid.innerHTML = `\n                    <div class=\"empty-state\">\n                        <h3>📭 No hay aplicaciones</h3>\n                        <p>Aún no has desplegado ninguna aplicación.</p>\n                        <p>Ve a <a href=\"/deploy\">Deployment</a> para crear tu primera app.</p>\n                    </div>\n                `;\n                return;\n            }\n\n            grid.innerHTML = apps.data.map((app) => {\n                const appError = app.error_msg ? `\n                        <div class=\"flex justify-between mb-1 text-base\">\n                            <span class=\"text-red-400 font-semibold\">Error:</span>\n                            <span class=\"text-red-300 font-mono\">${app.error_msg}</span>\n                        </div>\n                        ` : '';\n\n                const appUrl = app.status === 'running' ? `\n                            <a href=\"http://localhost:${app.port}\" target=\"_blank\" class=\"px-5 py-2 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-semibold shadow transition m-1\">🌐 Abrir</a>\n                        ` : '';\n\n                // Estado visual según status\n                let statusClass = \"bg-gray-500 text-white border-gray-300\";\n                if (app.status === 'running') statusClass = \"bg-green-500 text-white border-green-300\";\n                if (app.status === 'deploying') statusClass = \"bg-yellow-400 text-gray-900 border-yellow-200\";\n                if (app.status === 'error') statusClass = \"bg-red-500 text-white border-red-300\";\n\n                return `\n                <div class=\"bg-gray-800 border-4 border-blue-500 rounded-2xl p-4 shadow-2xl mb-8 hover:border-blue-300 transition\">\n                    <div class=\"flex justify-between items-center mb-6\">\n                        <div class=\"text-2xl font-bold text-white tracking-wide\">${app.name || 'Sin nombre'}</div>\n                        <div class=\"px-4 py-1 rounded-full text-base font-bold uppercase shadow border-2 border-white ${statusClass}\">${getStatusText(app.status)}</div>\n                    </div>\n                    <div class=\"mb-6 space-y-2\">\n                        <div class=\"flex justify-between mb-1 text-base\">\n                            <span class=\"text-blue-200 font-semibold\">ID:</span>\n                            <span class=\"text-blue-100 font-mono\">${app.id}</span>\n                        </div>\n                        <div class=\"flex justify-between mb-1 text-base\">\n                            <span class=\"text-blue-200 font-semibold\">Puerto:</span>\n                            <span class=\"text-blue-100 font-mono\">${app.port || 'N/A'}</span>\n                        </div>\n                        <div class=\"flex justify-between mb-1 text-base\">\n                            <span class=\"text-blue-200 font-semibold\">URL:</span>\n                            <span class=\"text-blue-100 font-mono\">\n                              <a href=\"http://localhost:${app.port}\" target=\"_blank\" class=\"text-blue-400 hover:underline\">\n                                http://localhost:${app.port}\n                              </a>\n                            </span>\n                        </div>\n                        <div class=\"flex justify-between mb-1 text-base\">\n                            <span class=\"text-blue-200 font-semibold\">Lenguaje:</span>\n                            <span class=\"text-blue-100 font-mono\">${app.language || 'N/A'}</span>\n                        </div>\n                        <div class=\"flex justify-between mb-1 text-base\">\n                            <span class=\"text-blue-200 font-semibold\">Runtime:</span>\n                            <span class=\"text-blue-100 font-mono\">${app.runtime_type || 'Docker'}</span>\n                        </div>\n                        <div class=\"flex justify-between mb-1 text-base\">\n                            <span class=\"text-blue-200 font-semibold\">Repo:</span>\n                            <span class=\"text-blue-100 font-mono\">\n                              <a href=\"${app.repo_url}\" target=\"_blank\" class=\"text-blue-400 hover:underline\">\n                                ${app.repo_url}\n                              </a>\n                            </span>\n                        </div>\n                        ${appError}\n                    </div>\n                    <div class=\"flex flex-wrap gap-4 mt-6\">\n                        ${appUrl}\n                        <button onclick=\"viewAppDetails('${app.id}')\" class=\"px-5 py-2 rounded-lg bg-cyan-600 hover:bg-cyan-500 text-white font-semibold shadow transition m-1\">🔍 Ver Detalles</button>\n                        <button onclick=\"viewLogs('${app.id}', '${app.name}')\" class=\"px-5 py-2 rounded-lg bg-gray-600 hover:bg-gray-500 text-white font-semibold shadow transition m-1\">📋 Logs</button>\n                        <button onclick=\"checkHealth('${app.id}')\" class=\"px-5 py-2 rounded-lg bg-green-600 hover:bg-green-500 text-white font-semibold shadow transition m-1\">🔍 Health Check</button>\n                        <button onclick=\"redeployApp('${app.id}')\" class=\"px-5 py-2 rounded-lg bg-yellow-400 hover:bg-yellow-300 text-gray-900 font-semibold shadow transition m-1\">🔄 Redeploy</button>\n                        <button onclick=\"deleteApp('${app.id}', '${app.name}')\" class=\"px-5 py-2 rounded-lg bg-red-600 hover:bg-red-500 text-white font-semibold shadow transition m-1\">🗑️ Eliminar</button>\n                    </div>\n                </div>\n            `;\n            }).join('');\n        }\n\n        // Función para obtener texto del estado\n        function getStatusText(status) {\n            const statusMap = {\n                'running': 'Ejecutándose',\n                'deploying': 'Deployando',\n                'error': 'Error',\n                'stopped': 'Detenido'\n            };\n            return statusMap[status] || status;\n        }\n\n        // Función para ver logs\n        function viewLogs(appId, appName) {\n            currentModalAppId = appId;\n            document.getElementById('modalTitle').textContent = `Logs de ${appName}`;\n            document.getElementById('modalLogs').innerHTML = '<div class=\"log-entry log-info\">Conectando a los logs...</div>';\n            document.getElementById('logsModal').classList.remove('hidden');\n\n            // Conectar SSE para logs\n            if (eventSource) {\n                eventSource.close();\n            }\n\n            eventSource = new EventSource(`/api/v1/apps/${appId}/logs`);\n\n            eventSource.onmessage = function(event) {\n                try {\n                    const data = JSON.parse(event.data);\n                    addLogEntry(data.message, data.type);\n                } catch (error) {\n                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');\n                }\n            };\n\n            eventSource.onerror = function() {\n                addLogEntry('Error en la conexión SSE', 'error');\n            };\n        }\n\n        // Función para agregar entrada de log\n        function addLogEntry(message, type = 'info') {\n            const logsContainer = document.getElementById('modalLogs');\n            const entry = document.createElement('div');\n            entry.className = `log-entry log-${type}`;\n\n            const timestamp = new Date().toLocaleTimeString();\n            entry.textContent = `[${timestamp}] ${message}`;\n\n            logsContainer.appendChild(entry);\n            logsContainer.scrollTop = logsContainer.scrollHeight;\n        }\n\n        // Función para cerrar modal de logs\n        function closeLogsModal() {\n            if (eventSource) {\n                eventSource.close();\n                eventSource = null;\n            }\n            document.getElementById('logsModal').classList.add('hidden');\n            currentModalAppId = null;\n        }\n\n        // Función para redeploy\n        async function redeployApp(appId) {\n            if (!confirm('¿Estás seguro de que quieres hacer redeploy de esta aplicación?')) {\n                return;\n            }\n\n            try {\n                const app = apps.data.find(a => a.id === appId);\n                if (!app) {\n                    showNotification('Aplicación no encontrada', 'error');\n                    return;\n                }\n\n                const response = await fetch('/api/v1/deploy', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: app.name,\n                        repo_url: app.repo_url\n                    })\n                });\n\n                if (response.ok) {\n                    showNotification('Redeploy iniciado correctamente', 'success');\n                    setTimeout(loadApps, 2000); // Recargar después de 2 segundos\n                } else {\n                    const error = await response.json();\n                    showNotification(`Error en redeploy: ${error.message}`, 'error');\n                }\n            } catch (error) {\n                showNotification(`Error de red: ${error.message}`, 'error');\n            }\n        }\n\n        // Función para eliminar aplicación\n        async function deleteApp(appId, appName) {\n            if (!confirm('¿Estás seguro de que quieres eliminar la aplicación \"' + appName + '\"?')) {\n                return;\n            }\n\n            try {\n                const response = await fetch('/api/v1/apps/' + appId, {\n                    method: 'DELETE'\n                });\n\n                if (response.ok) {\n                    showNotification('Aplicación eliminada correctamente', 'success');\n                    loadApps(); // Recargar lista\n                } else {\n                    const error = await response.json();\n                    showNotification('Error eliminando aplicación: ' + error.message, 'error');\n                }\n            } catch (error) {\n                showNotification('Error de red: ' + error.message, 'error');\n            }\n        }\n\n        // Función para health check\n        async function checkHealth(appId) {\n            try {\n                const app = apps.data.find(a => a.id === appId);\n                if (!app) {\n                    showNotification('Aplicación no encontrada', 'error');\n                    return;\n                }\n\n                if (app.status !== 'running') {\n                    showNotification('La aplicación no está ejecutándose', 'warning');\n                    return;\n                }\n\n                showNotification('Verificando salud de la aplicación...', 'info');\n\n                // Usar el endpoint de healthcheck de nuestra API para evitar CORS\n                const response = await fetch(`/api/v1/apps/${appId}/health`, {\n                    method: 'GET',\n                    timeout: 10000\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    showNotification(`❌ Error en healthcheck: ${errorData.message}`, 'error');\n                    return;\n                }\n\n                const healthData = await response.json();\n\n                if (healthData.data.healthy) {\n                    showNotification(`✅ Aplicación saludable (${healthData.data.details.http_status_code})`, 'success');\n                } else {\n                    const status = healthData.data.status;\n                    const message = healthData.data.message;\n\n                    if (status === 'container_not_running') {\n                        showNotification(`⚠️ Contenedor no está ejecutándose: ${message}`, 'warning');\n                    } else if (status === 'connection_error') {\n                        showNotification(`❌ Error de conexión: ${message}`, 'error');\n                    } else {\n                        showNotification(`❌ Aplicación no saludable: ${message}`, 'error');\n                    }\n                }\n            } catch (error) {\n                showNotification(`❌ Error verificando salud: ${error.message}`, 'error');\n            }\n        }\n\n        // Función para limpiar imágenes\n        async function pruneImages() {\n            if (!confirm('¿Estás seguro de que quieres limpiar las imágenes no utilizadas?')) {\n                return;\n            }\n\n            try {\n                showNotification('Limpiando imágenes...', 'info');\n\n                const response = await fetch('/api/v1/maintenance/prune-images', {\n                    method: 'POST'\n                });\n\n                const result = await response.json();\n\n                if (response.ok) {\n                    showNotification('✅ Imágenes limpiadas exitosamente', 'success');\n                } else {\n                    showNotification('❌ Error limpiando imágenes: ' + result.message, 'error');\n                }\n            } catch (error) {\n                showNotification('❌ Error de conexión: ' + error.message, 'error');\n            }\n        }\n\n        // Función para reiniciar aplicación\n        async function restartApp(appId) {\n            if (!confirm('¿Estás seguro de que quieres reiniciar esta aplicación?')) {\n                return;\n            }\n\n            try {\n                const app = apps.data.find(a => a.id === appId);\n                if (!app) {\n                    showNotification('Aplicación no encontrada', 'error');\n                    return;\n                }\n\n                showNotification('Reiniciando aplicación...', 'info');\n\n                // Primero hacer redeploy para reiniciar\n                const response = await fetch('/api/v1/deploy', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: app.name,\n                        repo_url: app.repo_url\n                    })\n                });\n\n                if (response.ok) {\n                    showNotification('✅ Aplicación reiniciada correctamente', 'success');\n                    setTimeout(loadApps, 2000);\n                } else {\n                    const error = await response.json();\n                    showNotification('❌ Error reiniciando aplicación: ' + error.message, 'error');\n                }\n            } catch (error) {\n                showNotification('❌ Error de red: ' + error.message, 'error');\n            }\n        }\n\n        // Cargar aplicaciones al iniciar\n        document.addEventListener('DOMContentLoaded', function() {\n            loadApps();\n\n            // Recargar automáticamente cada 30 segundos\n            setInterval(loadApps, 30000);\n        });\n\n        // Funciones para el menú de mantenimiento\n        function openMaintenanceMenu() {\n            document.getElementById('maintenanceMenu').classList.remove('hidden');\n        }\n\n        function closeMaintenanceMenu() {\n            document.getElementById('maintenanceMenu').classList.add('hidden');\n        }\n\n        // Función para reiniciar todas las aplicaciones\n        async function restartAllApps() {\n            if (!confirm('¿Estás seguro de que quieres reiniciar TODAS las aplicaciones?')) {\n                return;\n            }\n\n            closeMaintenanceMenu();\n            showNotification('Reiniciando todas las aplicaciones...', 'info');\n\n            const runningApps = apps.data.filter(app => app.status === 'running');\n\n            for (const app of runningApps) {\n                try {\n                    await fetch('/api/v1/deploy', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({\n                            name: app.name,\n                            repo_url: app.repo_url\n                        })\n                    });\n                } catch (error) {\n                    console.error('Error reiniciando app:', app.name, error);\n                }\n            }\n\n            showNotification('Reinicio masivo iniciado', 'success');\n            setTimeout(loadApps, 3000);\n        }\n\n        // Función para exportar datos de aplicaciones\n        function exportAppsData() {\n            const data = {\n                timestamp: new Date().toISOString(),\n                total_apps: apps.data.length,\n                stats: {\n                    running: apps.data.filter(app => app.status === 'running').length,\n                    deploying: apps.data.filter(app => app.status === 'deploying').length,\n                    error: apps.data.filter(app => app.status === 'error').length\n                },\n                applications: apps.data\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = 'diplo-apps-' + new Date().toISOString().split('T')[0] + '.json';\n            a.click();\n            URL.revokeObjectURL(url);\n\n            closeMaintenanceMenu();\n            showNotification('Datos exportados exitosamente', 'success');\n        }\n\n        // Cerrar modal con Escape\n        document.addEventListener('keydown', function(event) {\n            if (event.key === 'Escape') {\n                closeLogsModal();\n                closeMaintenanceMenu();\n                closeAppDetailsModal();\n                closeEnvVarModal();\n            }\n        });\n\n        // Variables globales para la vista detallada\n        let currentAppDetails = null;\n        let currentAppEnvVars = [];\n        let currentEditingEnvVar = null;\n        let detailsEventSource = null;\n\n        // Función para ver detalles de aplicación\n        function viewAppDetails(appId) {\n            currentAppDetails = apps.data.find(app => app.id === appId);\n            if (!currentAppDetails) {\n                showNotification('Aplicación no encontrada', 'error');\n                return;\n            }\n\n            document.getElementById('appDetailsTitle').textContent = `${currentAppDetails.name} - Detalles`;\n            document.getElementById('appDetailsModal').classList.remove('hidden');\n\n            // Mostrar pestaña general por defecto\n            showDetailsTab('general');\n            loadAppGeneralDetails();\n        }\n\n        // Funciones para manejar las pestañas\n        function showDetailsTab(tabName) {\n            // Ocultar todas las pestañas\n            document.querySelectorAll('.tab-content').forEach(tab => {\n                tab.classList.add('hidden');\n            });\n            document.querySelectorAll('.tab-button').forEach(btn => {\n                btn.classList.remove('active', 'text-white', 'border-blue-500');\n                btn.classList.add('text-gray-400', 'border-transparent');\n            });\n\n            // Mostrar la pestaña seleccionada\n            document.getElementById(tabName + 'Tab').classList.remove('hidden');\n            event.target.classList.add('active', 'text-white', 'border-blue-500');\n            event.target.classList.remove('text-gray-400', 'border-transparent');\n        }\n\n        // Función para cargar detalles generales\n        function loadAppGeneralDetails() {\n            const grid = document.getElementById('appDetailsGrid');\n            grid.innerHTML = `\n                <div class=\"detail-section\">\n                    <h4>📋 Información General</h4>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">ID:</span>\n                        <span class=\"detail-value\">${currentAppDetails.id}</span>\n                    </div>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Nombre:</span>\n                        <span class=\"detail-value\">${currentAppDetails.name}</span>\n                    </div>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Estado:</span>\n                        <span class=\"detail-value status-${currentAppDetails.status}\">${getStatusText(currentAppDetails.status)}</span>\n                    </div>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Lenguaje:</span>\n                        <span class=\"detail-value\">${currentAppDetails.language || 'N/A'}</span>\n                    </div>\n                </div>\n                <div class=\"detail-section\">\n                    <h4>🌐 Configuración de Red</h4>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Puerto:</span>\n                        <span class=\"detail-value\">${currentAppDetails.port}</span>\n                    </div>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">URL:</span>\n                        <span class=\"detail-value\">\n                            <a href=\"http://localhost:${currentAppDetails.port}\" target=\"_blank\" class=\"text-white visited:text-white\">\n                                http://localhost:${currentAppDetails.port}\n                            </a>\n                        </span>\n                    </div>\n                </div>\n                <div class=\"detail-section\">\n                    <h4>🐳 Información del Contenedor</h4>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Container ID:</span>\n                        <span class=\"detail-value\">${currentAppDetails.container_id || 'N/A'}</span>\n                    </div>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Image ID:</span>\n                        <span class=\"detail-value\">${currentAppDetails.image_id || 'N/A'}</span>\n                    </div>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Runtime:</span>\n                        <span class=\"detail-value\">${currentAppDetails.runtime_type || 'Docker'}</span>\n                    </div>\n                </div>\n                <div class=\"detail-section\">\n                    <h4>📂 Repositorio</h4>\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">URL:</span>\n                        <span class=\"detail-value\">\n                            <a href=\"${currentAppDetails.repo_url}\" target=\"_blank\" class=\"text-white visited:text-white\">\n                                ${currentAppDetails.repo_url}\n                            </a>\n                        </span>\n                    </div>\n                </div>\n            `;\n        }\n\n        // Función para cargar variables de entorno\n        async function loadAppEnvVars() {\n            try {\n                const response = await fetch(`/api/v1/apps/${currentAppDetails.id}/env`);\n                if (response.ok) {\n                    currentAppEnvVars = await response.json();\n                    renderEnvVarsList();\n                } else {\n                    showNotification('Error cargando variables de entorno', 'error');\n                }\n            } catch (error) {\n                showNotification('Error de conexión', 'error');\n            }\n        }\n\n        // Función para renderizar la lista de variables de entorno\n        function renderEnvVarsList() {\n            const container = document.getElementById('envVarsList');\n\n            if (currentAppEnvVars.data.length === 0) {\n                container.innerHTML = `\n                    <div class=\"empty-state\">\n                        <p>No hay variables de entorno configuradas.</p>\n                        <p>Usa el botón \"Agregar Variable\" para crear una nueva.</p>\n                    </div>\n                `;\n                return;\n            }\n\n            container.innerHTML = currentAppEnvVars.data.map(envVar => `\n                <div class=\"env-var-item\">\n                    <div class=\"env-var-info\">\n                        <div class=\"env-var-key\">${envVar.key}</div>\n                        <div class=\"env-var-value\">${envVar.is_secret ? '••••••••' : envVar.value}</div>\n                        ${envVar.is_secret ? '<div class=\"env-var-secret\">🔒 SECRETO</div>' : ''}\n                    </div>\n                    <div class=\"env-var-actions\">\n                        <button onclick=\"editEnvVar('${envVar.key}')\" class=\"btn btn-sm btn-secondary\">✏️</button>\n                        <button onclick=\"deleteEnvVar('${envVar.key}')\" class=\"btn btn-sm btn-danger\">🗑️</button>\n                    </div>\n                </div>\n            `).join('');\n        }\n\n        // Función para cargar logs en la vista detallada\n        function loadAppLogsInDetails() {\n            const container = document.getElementById('detailsLogsContainer');\n            container.innerHTML = '<div class=\"log-entry log-info\">Conectando a los logs...</div>';\n\n            if (detailsEventSource) {\n                detailsEventSource.close();\n            }\n\n            detailsEventSource = new EventSource(`/api/v1/apps/${currentAppDetails.id}/logs`);\n\n            detailsEventSource.onmessage = function(event) {\n                try {\n                    const data = JSON.parse(event.data);\n                    addLogEntryToDetails(data.message, data.type);\n                } catch (error) {\n                    addLogEntryToDetails(`Error parseando evento: ${error.message}`, 'error');\n                }\n            };\n\n            detailsEventSource.onerror = function() {\n                addLogEntryToDetails('Error en la conexión SSE', 'error');\n            };\n        }\n\n        // Función para agregar entrada de log en detalles\n        function addLogEntryToDetails(message, type = 'info') {\n            const container = document.getElementById('detailsLogsContainer');\n            const entry = document.createElement('div');\n            entry.className = `log-entry log-${type}`;\n\n            const timestamp = new Date().toLocaleTimeString();\n            entry.textContent = `[${timestamp}] ${message}`;\n\n            container.appendChild(entry);\n            container.scrollTop = container.scrollHeight;\n        }\n\n        // Función para mostrar formulario de agregar variable de entorno\n        function showAddEnvVarForm() {\n            currentEditingEnvVar = null;\n            document.getElementById('envVarModalTitle').textContent = 'Agregar Variable de Entorno';\n            document.getElementById('envVarKey').value = '';\n            document.getElementById('envVarValue').value = '';\n            document.getElementById('envVarIsSecret').checked = false;\n            document.getElementById('envVarKey').disabled = false;\n            document.getElementById('envVarModal').classList.remove('hidden');\n        }\n\n        // Función para editar variable de entorno\n        function editEnvVar(key) {\n            const envVar = currentAppEnvVars.data.find(env => env.key === key);\n            if (!envVar) return;\n\n            currentEditingEnvVar = key;\n            document.getElementById('envVarModalTitle').textContent = 'Editar Variable de Entorno';\n            document.getElementById('envVarKey').value = envVar.key;\n            document.getElementById('envVarValue').value = envVar.value;\n            document.getElementById('envVarIsSecret').checked = envVar.is_secret;\n            document.getElementById('envVarKey').disabled = true;\n            document.getElementById('envVarModal').classList.remove('hidden');\n        }\n\n        // Función para eliminar variable de entorno\n        async function deleteEnvVar(key) {\n            if (!confirm(`¿Estás seguro de que quieres eliminar la variable \"${key}\"?`)) {\n                return;\n            }\n\n            try {\n                const response = await fetch(`/api/v1/apps/${currentAppDetails.id}/env/${key}`, {\n                    method: 'DELETE'\n                });\n\n                if (response.ok) {\n                    showNotification('Variable de entorno eliminada', 'success');\n                    loadAppEnvVars();\n                } else {\n                    const error = await response.json();\n                    showNotification(`Error: ${error.message}`, 'error');\n                }\n            } catch (error) {\n                showNotification('Error de conexión', 'error');\n            }\n        }\n\n        // Función para actualizar variables de entorno\n        function refreshEnvVars() {\n            loadAppEnvVars();\n        }\n\n        // Función para cerrar modal de detalles\n        function closeAppDetailsModal() {\n            document.getElementById('appDetailsModal').classList.add('hidden');\n            if (detailsEventSource) {\n                detailsEventSource.close();\n                detailsEventSource = null;\n            }\n            currentAppDetails = null;\n            currentAppEnvVars = [];\n        }\n\n        // Función para cerrar modal de variable de entorno\n        function closeEnvVarModal() {\n            document.getElementById('envVarModal').classList.add('hidden');\n            currentEditingEnvVar = null;\n        }\n\n        // Manejar envío del formulario de variable de entorno\n        document.getElementById('envVarForm').addEventListener('submit', async function(e) {\n            e.preventDefault();\n\n            const key = document.getElementById('envVarKey').value.trim();\n            const value = document.getElementById('envVarValue').value.trim();\n            const isSecret = document.getElementById('envVarIsSecret').checked;\n\n            if (!key || !value) {\n                showNotification('Todos los campos son requeridos', 'error');\n                return;\n            }\n\n            try {\n                const isEditing = currentEditingEnvVar !== null;\n                const url = isEditing\n                    ? `/api/v1/apps/${currentAppDetails.id}/env/${key}`\n                    : `/api/v1/apps/${currentAppDetails.id}/env`;\n\n                const method = isEditing ? 'PUT' : 'POST';\n                const payload = isEditing\n                    ? { value: value, is_secret: isSecret }\n                    : { key: key, value: value, is_secret: isSecret };\n\n                const response = await fetch(url, {\n                    method: method,\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(payload)\n                });\n\n                if (response.ok) {\n                    showNotification(isEditing ? 'Variable actualizada' : 'Variable creada', 'success');\n                    closeEnvVarModal();\n                    loadAppEnvVars();\n                } else {\n                    const error = await response.json();\n                    showNotification(`Error: ${error.message}`, 'error');\n                }\n            } catch (error) {\n                showNotification('Error de conexión', 'error');\n            }\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
