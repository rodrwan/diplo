package templates

templ AppsManager() {
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5 mb-8" id="statsSection">
        <div class="card">
            <div class="text-4xl font-bold text-blue-500" id="totalApps">-</div>
            <div class="text-gray-400 mt-2">Total Apps</div>
        </div>
        <div class="card">
            <div class="text-4xl font-bold text-green-500" id="runningApps">-</div>
            <div class="text-gray-400 mt-2">Ejecut√°ndose</div>
        </div>
        <div class="card">
            <div class="text-4xl font-bold text-yellow-500" id="deployingApps">-</div>
            <div class="text-gray-400 mt-2">Deployando</div>
        </div>
        <div class="card">
            <div class="text-4xl font-bold text-red-500" id="errorApps">-</div>
            <div class="text-gray-400 mt-2">Con Errores</div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-8" id="appsGrid">
        <div class="flex items-center justify-center p-8">
            <h3 class="text-xl text-gray-400">üîÑ Cargando aplicaciones...</h3>
        </div>
    </div>

    <!-- Modal para logs -->
    <div class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" id="logsModal">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg shadow-2xl w-full max-w-4xl max-h-[80vh] overflow-hidden">
                <div class="flex justify-between items-center p-6 border-b border-gray-600">
                    <h3 class="text-xl font-semibold text-white" id="modalTitle">Logs de Aplicaci√≥n</h3>
                    <button class="text-gray-400 hover:text-white text-2xl font-bold" onclick="closeLogsModal()">&times;</button>
                </div>
                <div class="p-6 overflow-y-auto max-h-[60vh]" id="modalLogs">
                    <div class="log-entry log-info">Conectando a los logs...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Botones flotantes -->
    <div class="fixed bottom-6 right-6 flex flex-col gap-2 z-40">
        <button class="w-10 h-10 rounded-full bg-blue-600 hover:bg-blue-500 text-white shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center text-lg hover:scale-105" onclick="loadApps()" title="Actualizar aplicaciones">
            üîÑ
        </button>
        <button class="w-10 h-10 rounded-full bg-gray-600 hover:bg-gray-500 text-white shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center text-lg hover:scale-105" onclick="openMaintenanceMenu()" title="Mantenimiento del sistema">
            üîß
        </button>
    </div>

    <!-- Modal para vista detallada de aplicaci√≥n -->
    <div class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" id="appDetailsModal">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-hidden">
                <div class="flex justify-between items-center p-6 border-b border-gray-600">
                    <h3 class="text-xl font-semibold text-white" id="appDetailsTitle">Detalles de Aplicaci√≥n</h3>
                    <button class="text-gray-400 hover:text-white text-2xl font-bold" onclick="closeAppDetailsModal()">&times;</button>
                </div>
                <div class="p-6">
                    <div class="flex border-b border-gray-600 mb-6">
                        <button class="tab-button active px-4 py-2 text-white border-b-2 border-blue-500" onclick="showDetailsTab('general')">üìã General</button>
                        <button class="tab-button px-4 py-2 text-gray-400 hover:text-white border-b-2 border-transparent" onclick="showDetailsTab('env')">üîß Variables de Entorno</button>
                        <button class="tab-button px-4 py-2 text-gray-400 hover:text-white border-b-2 border-transparent" onclick="showDetailsTab('logs')">üìú Logs</button>
                    </div>
                    <div class="details-content">
                        <div id="generalTab" class="tab-content active">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="appDetailsGrid">
                                <!-- Se llena din√°micamente -->
                            </div>
                        </div>
                        <div id="envTab" class="tab-content hidden">
                            <div class="space-y-6">
                                <div class="flex gap-4">
                                    <button onclick="showAddEnvVarForm()" class="btn btn-primary">‚ûï Agregar Variable</button>
                                    <button onclick="refreshEnvVars()" class="btn btn-secondary">üîÑ Actualizar</button>
                                </div>
                                <div class="space-y-3" id="envVarsList">
                                    <!-- Se llena din√°micamente -->
                                </div>
                            </div>
                        </div>
                        <div id="logsTab" class="tab-content hidden">
                            <div class="logs-container" id="detailsLogsContainer">
                                <div class="log-entry log-info">Conectando a los logs...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para agregar/editar variable de entorno -->
    <div class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" id="envVarModal">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg shadow-2xl w-full max-w-md">
                <div class="flex justify-between items-center p-6 border-b border-gray-600">
                    <h3 class="text-xl font-semibold text-white" id="envVarModalTitle">Agregar Variable de Entorno</h3>
                    <button class="text-gray-400 hover:text-white text-2xl font-bold" onclick="closeEnvVarModal()">&times;</button>
                </div>
                <div class="p-6">
                    <form id="envVarForm" class="space-y-4">
                        <div class="form-group">
                            <label for="envVarKey" class="form-label">Nombre de la Variable:</label>
                            <input type="text" id="envVarKey" placeholder="MI_VARIABLE" required class="form-input">
                        </div>
                        <div class="form-group">
                            <label for="envVarValue" class="form-label">Valor:</label>
                            <input type="text" id="envVarValue" placeholder="mi_valor" required class="form-input">
                        </div>
                        <div class="form-group">
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" id="envVarIsSecret" class="rounded">
                                <span class="text-gray-200">Marcar como secreto</span>
                            </label>
                        </div>
                        <div class="flex gap-3 pt-4">
                            <button type="submit" class="btn btn-primary flex-1">üíæ Guardar</button>
                            <button type="button" onclick="closeEnvVarModal()" class="btn btn-secondary flex-1">‚ùå Cancelar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Men√∫ de mantenimiento -->
    <div class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" id="maintenanceMenu">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg shadow-2xl w-full max-w-md">
                <div class="p-6">
                    <h3 class="text-xl font-semibold text-white mb-6">üîß Mantenimiento del Sistema</h3>
                    <div class="space-y-3">
                        <button onclick="pruneImages()" class="btn btn-warning w-full">üóëÔ∏è Limpiar Im√°genes</button>
                        <button onclick="restartAllApps()" class="btn btn-danger w-full">üîÑ Reiniciar Todas</button>
                        <button onclick="exportAppsData()" class="btn btn-secondary w-full">üì• Exportar Datos</button>
                        <button onclick="closeMaintenanceMenu()" class="btn btn-secondary w-full">‚ùå Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let apps = [];
        let eventSource = null;
        let currentModalAppId = null;

        // Funci√≥n para mostrar notificaciones
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }

        // Funci√≥n para cargar aplicaciones
        async function loadApps() {
            try {
                const response = await fetch('/api/v1/apps');
                if (response.ok) {
                    apps = await response.json();
                    updateStats();
                    renderApps();
                } else {
                    showNotification('Error cargando aplicaciones', 'error');
                }
            } catch (error) {
                showNotification('Error de conexi√≥n', 'error');
            }
        }

        // Funci√≥n para actualizar estad√≠sticas
        function updateStats() {
            const stats = {
                total: apps.data.length,
                running: apps.data.filter((app) => app.status === 'running').length,
                deploying: apps.data.filter((app) => app.status === 'deploying').length,
                error: apps.data.filter((app) => app.status === 'error').length
            };

            document.getElementById('totalApps').textContent = stats.total;
            document.getElementById('runningApps').textContent = stats.running;
            document.getElementById('deployingApps').textContent = stats.deploying;
            document.getElementById('errorApps').textContent = stats.error;
        }

        // Funci√≥n para renderizar aplicaciones
        function renderApps() {
            const grid = document.getElementById('appsGrid');

            if (apps.data.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <h3>üì≠ No hay aplicaciones</h3>
                        <p>A√∫n no has desplegado ninguna aplicaci√≥n.</p>
                        <p>Ve a <a href="/deploy">Deployment</a> para crear tu primera app.</p>
                    </div>
                `;
                return;
            }

            grid.innerHTML = apps.data.map((app) => {
                const appError = app.error_msg ? `
                        <div class="flex justify-between mb-1 text-base">
                            <span class="text-red-400 font-semibold">Error:</span>
                            <span class="text-red-300 font-mono">${app.error_msg}</span>
                        </div>
                        ` : '';

                const appUrl = app.status === 'running' ? `
                            <a href="http://localhost:${app.port}" target="_blank" class="px-5 py-2 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-semibold shadow transition m-1">üåê Abrir</a>
                        ` : '';

                // Estado visual seg√∫n status
                let statusClass = "bg-gray-500 text-white border-gray-300";
                if (app.status === 'running') statusClass = "bg-green-500 text-white border-green-300";
                if (app.status === 'deploying') statusClass = "bg-yellow-400 text-gray-900 border-yellow-200";
                if (app.status === 'error') statusClass = "bg-red-500 text-white border-red-300";

                return `
                <div class="bg-gray-800 border-4 border-blue-500 rounded-2xl p-4 shadow-2xl mb-8 hover:border-blue-300 transition">
                    <div class="flex justify-between items-center mb-6">
                        <div class="text-2xl font-bold text-white tracking-wide">${app.name || 'Sin nombre'}</div>
                        <div class="px-4 py-1 rounded-full text-base font-bold uppercase shadow border-2 border-white ${statusClass}">${getStatusText(app.status)}</div>
                    </div>
                    <div class="mb-6 space-y-2">
                        <div class="flex justify-between mb-1 text-base">
                            <span class="text-blue-200 font-semibold">ID:</span>
                            <span class="text-blue-100 font-mono">${app.id}</span>
                        </div>
                        <div class="flex justify-between mb-1 text-base">
                            <span class="text-blue-200 font-semibold">Puerto:</span>
                            <span class="text-blue-100 font-mono">${app.port || 'N/A'}</span>
                        </div>
                        <div class="flex justify-between mb-1 text-base">
                            <span class="text-blue-200 font-semibold">URL:</span>
                            <span class="text-blue-100 font-mono">
                              <a href="http://localhost:${app.port}" target="_blank" class="text-blue-400 hover:underline">
                                http://localhost:${app.port}
                              </a>
                            </span>
                        </div>
                        <div class="flex justify-between mb-1 text-base">
                            <span class="text-blue-200 font-semibold">Lenguaje:</span>
                            <span class="text-blue-100 font-mono">${app.language || 'N/A'}</span>
                        </div>
                        <div class="flex justify-between mb-1 text-base">
                            <span class="text-blue-200 font-semibold">Runtime:</span>
                            <span class="text-blue-100 font-mono">${app.runtime_type || 'Docker'}</span>
                        </div>
                        <div class="flex justify-between mb-1 text-base">
                            <span class="text-blue-200 font-semibold">Repo:</span>
                            <span class="text-blue-100 font-mono">
                              <a href="${app.repo_url}" target="_blank" class="text-blue-400 hover:underline">
                                ${app.repo_url}
                              </a>
                            </span>
                        </div>
                        ${appError}
                    </div>
                    <div class="flex flex-wrap gap-4 mt-6">
                        ${appUrl}
                        <button onclick="viewAppDetails('${app.id}')" class="px-5 py-2 rounded-lg bg-cyan-600 hover:bg-cyan-500 text-white font-semibold shadow transition m-1">üîç Ver Detalles</button>
                        <button onclick="viewLogs('${app.id}', '${app.name}')" class="px-5 py-2 rounded-lg bg-gray-600 hover:bg-gray-500 text-white font-semibold shadow transition m-1">üìã Logs</button>
                        <button onclick="checkHealth('${app.id}')" class="px-5 py-2 rounded-lg bg-green-600 hover:bg-green-500 text-white font-semibold shadow transition m-1">üîç Health Check</button>
                        <button onclick="redeployApp('${app.id}')" class="px-5 py-2 rounded-lg bg-yellow-400 hover:bg-yellow-300 text-gray-900 font-semibold shadow transition m-1">üîÑ Redeploy</button>
                        <button onclick="deleteApp('${app.id}', '${app.name}')" class="px-5 py-2 rounded-lg bg-red-600 hover:bg-red-500 text-white font-semibold shadow transition m-1">üóëÔ∏è Eliminar</button>
                    </div>
                </div>
            `;
            }).join('');
        }

        // Funci√≥n para obtener texto del estado
        function getStatusText(status) {
            const statusMap = {
                'running': 'Ejecut√°ndose',
                'deploying': 'Deployando',
                'error': 'Error',
                'stopped': 'Detenido'
            };
            return statusMap[status] || status;
        }

        // Funci√≥n para ver logs
        function viewLogs(appId, appName) {
            currentModalAppId = appId;
            document.getElementById('modalTitle').textContent = `Logs de ${appName}`;
            document.getElementById('modalLogs').innerHTML = '<div class="log-entry log-info">Conectando a los logs...</div>';
            document.getElementById('logsModal').classList.remove('hidden');

            // Conectar SSE para logs
            if (eventSource) {
                eventSource.close();
            }

            eventSource = new EventSource(`/api/v1/apps/${appId}/logs`);

            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    addLogEntry(data.message, data.type);
                } catch (error) {
                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');
                }
            };

            eventSource.onerror = function() {
                addLogEntry('Error en la conexi√≥n SSE', 'error');
            };
        }

        // Funci√≥n para agregar entrada de log
        function addLogEntry(message, type = 'info') {
            const logsContainer = document.getElementById('modalLogs');
            const entry = document.createElement('div');
            entry.className = `log-entry log-${type}`;

            const timestamp = new Date().toLocaleTimeString();
            entry.textContent = `[${timestamp}] ${message}`;

            logsContainer.appendChild(entry);
            logsContainer.scrollTop = logsContainer.scrollHeight;
        }

        // Funci√≥n para cerrar modal de logs
        function closeLogsModal() {
            if (eventSource) {
                eventSource.close();
                eventSource = null;
            }
            document.getElementById('logsModal').classList.add('hidden');
            currentModalAppId = null;
        }

        // Funci√≥n para redeploy
        async function redeployApp(appId) {
            if (!confirm('¬øEst√°s seguro de que quieres hacer redeploy de esta aplicaci√≥n?')) {
                return;
            }

            try {
                const app = apps.data.find(a => a.id === appId);
                if (!app) {
                    showNotification('Aplicaci√≥n no encontrada', 'error');
                    return;
                }

                const response = await fetch('/api/v1/deploy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: app.name,
                        repo_url: app.repo_url
                    })
                });

                if (response.ok) {
                    showNotification('Redeploy iniciado correctamente', 'success');
                    setTimeout(loadApps, 2000); // Recargar despu√©s de 2 segundos
                } else {
                    const error = await response.json();
                    showNotification(`Error en redeploy: ${error.message}`, 'error');
                }
            } catch (error) {
                showNotification(`Error de red: ${error.message}`, 'error');
            }
        }

        // Funci√≥n para eliminar aplicaci√≥n
        async function deleteApp(appId, appName) {
            if (!confirm('¬øEst√°s seguro de que quieres eliminar la aplicaci√≥n "' + appName + '"?')) {
                return;
            }

            try {
                const response = await fetch('/api/v1/apps/' + appId, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Aplicaci√≥n eliminada correctamente', 'success');
                    loadApps(); // Recargar lista
                } else {
                    const error = await response.json();
                    showNotification('Error eliminando aplicaci√≥n: ' + error.message, 'error');
                }
            } catch (error) {
                showNotification('Error de red: ' + error.message, 'error');
            }
        }

        // Funci√≥n para health check
        async function checkHealth(appId) {
            try {
                const app = apps.data.find(a => a.id === appId);
                if (!app) {
                    showNotification('Aplicaci√≥n no encontrada', 'error');
                    return;
                }

                if (app.status !== 'running') {
                    showNotification('La aplicaci√≥n no est√° ejecut√°ndose', 'warning');
                    return;
                }

                showNotification('Verificando salud de la aplicaci√≥n...', 'info');

                // Usar el endpoint de healthcheck de nuestra API para evitar CORS
                const response = await fetch(`/api/v1/apps/${appId}/health`, {
                    method: 'GET',
                    timeout: 10000
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    showNotification(`‚ùå Error en healthcheck: ${errorData.message}`, 'error');
                    return;
                }

                const healthData = await response.json();

                if (healthData.data.healthy) {
                    showNotification(`‚úÖ Aplicaci√≥n saludable (${healthData.data.details.http_status_code})`, 'success');
                } else {
                    const status = healthData.data.status;
                    const message = healthData.data.message;

                    if (status === 'container_not_running') {
                        showNotification(`‚ö†Ô∏è Contenedor no est√° ejecut√°ndose: ${message}`, 'warning');
                    } else if (status === 'connection_error') {
                        showNotification(`‚ùå Error de conexi√≥n: ${message}`, 'error');
                    } else {
                        showNotification(`‚ùå Aplicaci√≥n no saludable: ${message}`, 'error');
                    }
                }
            } catch (error) {
                showNotification(`‚ùå Error verificando salud: ${error.message}`, 'error');
            }
        }

        // Funci√≥n para limpiar im√°genes
        async function pruneImages() {
            if (!confirm('¬øEst√°s seguro de que quieres limpiar las im√°genes no utilizadas?')) {
                return;
            }

            try {
                showNotification('Limpiando im√°genes...', 'info');

                const response = await fetch('/api/v1/maintenance/prune-images', {
                    method: 'POST'
                });

                const result = await response.json();

                if (response.ok) {
                    showNotification('‚úÖ Im√°genes limpiadas exitosamente', 'success');
                } else {
                    showNotification('‚ùå Error limpiando im√°genes: ' + result.message, 'error');
                }
            } catch (error) {
                showNotification('‚ùå Error de conexi√≥n: ' + error.message, 'error');
            }
        }

        // Funci√≥n para reiniciar aplicaci√≥n
        async function restartApp(appId) {
            if (!confirm('¬øEst√°s seguro de que quieres reiniciar esta aplicaci√≥n?')) {
                return;
            }

            try {
                const app = apps.data.find(a => a.id === appId);
                if (!app) {
                    showNotification('Aplicaci√≥n no encontrada', 'error');
                    return;
                }

                showNotification('Reiniciando aplicaci√≥n...', 'info');

                // Primero hacer redeploy para reiniciar
                const response = await fetch('/api/v1/deploy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: app.name,
                        repo_url: app.repo_url
                    })
                });

                if (response.ok) {
                    showNotification('‚úÖ Aplicaci√≥n reiniciada correctamente', 'success');
                    setTimeout(loadApps, 2000);
                } else {
                    const error = await response.json();
                    showNotification('‚ùå Error reiniciando aplicaci√≥n: ' + error.message, 'error');
                }
            } catch (error) {
                showNotification('‚ùå Error de red: ' + error.message, 'error');
            }
        }

        // Cargar aplicaciones al iniciar
        document.addEventListener('DOMContentLoaded', function() {
            loadApps();

            // Recargar autom√°ticamente cada 30 segundos
            setInterval(loadApps, 30000);
        });

        // Funciones para el men√∫ de mantenimiento
        function openMaintenanceMenu() {
            document.getElementById('maintenanceMenu').classList.remove('hidden');
        }

        function closeMaintenanceMenu() {
            document.getElementById('maintenanceMenu').classList.add('hidden');
        }

        // Funci√≥n para reiniciar todas las aplicaciones
        async function restartAllApps() {
            if (!confirm('¬øEst√°s seguro de que quieres reiniciar TODAS las aplicaciones?')) {
                return;
            }

            closeMaintenanceMenu();
            showNotification('Reiniciando todas las aplicaciones...', 'info');

            const runningApps = apps.data.filter(app => app.status === 'running');

            for (const app of runningApps) {
                try {
                    await fetch('/api/v1/deploy', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            name: app.name,
                            repo_url: app.repo_url
                        })
                    });
                } catch (error) {
                    console.error('Error reiniciando app:', app.name, error);
                }
            }

            showNotification('Reinicio masivo iniciado', 'success');
            setTimeout(loadApps, 3000);
        }

        // Funci√≥n para exportar datos de aplicaciones
        function exportAppsData() {
            const data = {
                timestamp: new Date().toISOString(),
                total_apps: apps.data.length,
                stats: {
                    running: apps.data.filter(app => app.status === 'running').length,
                    deploying: apps.data.filter(app => app.status === 'deploying').length,
                    error: apps.data.filter(app => app.status === 'error').length
                },
                applications: apps.data
            };

            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'diplo-apps-' + new Date().toISOString().split('T')[0] + '.json';
            a.click();
            URL.revokeObjectURL(url);

            closeMaintenanceMenu();
            showNotification('Datos exportados exitosamente', 'success');
        }

        // Cerrar modal con Escape
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeLogsModal();
                closeMaintenanceMenu();
                closeAppDetailsModal();
                closeEnvVarModal();
            }
        });

        // Variables globales para la vista detallada
        let currentAppDetails = null;
        let currentAppEnvVars = [];
        let currentEditingEnvVar = null;
        let detailsEventSource = null;

        // Funci√≥n para ver detalles de aplicaci√≥n
        function viewAppDetails(appId) {
            currentAppDetails = apps.data.find(app => app.id === appId);
            if (!currentAppDetails) {
                showNotification('Aplicaci√≥n no encontrada', 'error');
                return;
            }

            document.getElementById('appDetailsTitle').textContent = `${currentAppDetails.name} - Detalles`;
            document.getElementById('appDetailsModal').classList.remove('hidden');

            // Mostrar pesta√±a general por defecto
            showDetailsTab('general');
            loadAppGeneralDetails();
        }

        // Funciones para manejar las pesta√±as
        function showDetailsTab(tabName) {
            // Ocultar todas las pesta√±as
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active', 'text-white', 'border-blue-500');
                btn.classList.add('text-gray-400', 'border-transparent');
            });

            // Mostrar la pesta√±a seleccionada
            document.getElementById(tabName + 'Tab').classList.remove('hidden');
            event.target.classList.add('active', 'text-white', 'border-blue-500');
            event.target.classList.remove('text-gray-400', 'border-transparent');
        }

        // Funci√≥n para cargar detalles generales
        function loadAppGeneralDetails() {
            const grid = document.getElementById('appDetailsGrid');
            grid.innerHTML = `
                <div class="detail-section">
                    <h4>üìã Informaci√≥n General</h4>
                    <div class="detail-row">
                        <span class="detail-label">ID:</span>
                        <span class="detail-value">${currentAppDetails.id}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Nombre:</span>
                        <span class="detail-value">${currentAppDetails.name}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Estado:</span>
                        <span class="detail-value status-${currentAppDetails.status}">${getStatusText(currentAppDetails.status)}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Lenguaje:</span>
                        <span class="detail-value">${currentAppDetails.language || 'N/A'}</span>
                    </div>
                </div>
                <div class="detail-section">
                    <h4>üåê Configuraci√≥n de Red</h4>
                    <div class="detail-row">
                        <span class="detail-label">Puerto:</span>
                        <span class="detail-value">${currentAppDetails.port}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">URL:</span>
                        <span class="detail-value">
                            <a href="http://localhost:${currentAppDetails.port}" target="_blank" class="text-white visited:text-white">
                                http://localhost:${currentAppDetails.port}
                            </a>
                        </span>
                    </div>
                </div>
                <div class="detail-section">
                    <h4>üê≥ Informaci√≥n del Contenedor</h4>
                    <div class="detail-row">
                        <span class="detail-label">Container ID:</span>
                        <span class="detail-value">${currentAppDetails.container_id || 'N/A'}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Image ID:</span>
                        <span class="detail-value">${currentAppDetails.image_id || 'N/A'}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Runtime:</span>
                        <span class="detail-value">${currentAppDetails.runtime_type || 'Docker'}</span>
                    </div>
                </div>
                <div class="detail-section">
                    <h4>üìÇ Repositorio</h4>
                    <div class="detail-row">
                        <span class="detail-label">URL:</span>
                        <span class="detail-value">
                            <a href="${currentAppDetails.repo_url}" target="_blank" class="text-white visited:text-white">
                                ${currentAppDetails.repo_url}
                            </a>
                        </span>
                    </div>
                </div>
            `;
        }

        // Funci√≥n para cargar variables de entorno
        async function loadAppEnvVars() {
            try {
                const response = await fetch(`/api/v1/apps/${currentAppDetails.id}/env`);
                if (response.ok) {
                    currentAppEnvVars = await response.json();
                    renderEnvVarsList();
                } else {
                    showNotification('Error cargando variables de entorno', 'error');
                }
            } catch (error) {
                showNotification('Error de conexi√≥n', 'error');
            }
        }

        // Funci√≥n para renderizar la lista de variables de entorno
        function renderEnvVarsList() {
            const container = document.getElementById('envVarsList');

            if (currentAppEnvVars.data.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <p>No hay variables de entorno configuradas.</p>
                        <p>Usa el bot√≥n "Agregar Variable" para crear una nueva.</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = currentAppEnvVars.data.map(envVar => `
                <div class="env-var-item">
                    <div class="env-var-info">
                        <div class="env-var-key">${envVar.key}</div>
                        <div class="env-var-value">${envVar.is_secret ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : envVar.value}</div>
                        ${envVar.is_secret ? '<div class="env-var-secret">üîí SECRETO</div>' : ''}
                    </div>
                    <div class="env-var-actions">
                        <button onclick="editEnvVar('${envVar.key}')" class="btn btn-sm btn-secondary">‚úèÔ∏è</button>
                        <button onclick="deleteEnvVar('${envVar.key}')" class="btn btn-sm btn-danger">üóëÔ∏è</button>
                    </div>
                </div>
            `).join('');
        }

        // Funci√≥n para cargar logs en la vista detallada
        function loadAppLogsInDetails() {
            const container = document.getElementById('detailsLogsContainer');
            container.innerHTML = '<div class="log-entry log-info">Conectando a los logs...</div>';

            if (detailsEventSource) {
                detailsEventSource.close();
            }

            detailsEventSource = new EventSource(`/api/v1/apps/${currentAppDetails.id}/logs`);

            detailsEventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    addLogEntryToDetails(data.message, data.type);
                } catch (error) {
                    addLogEntryToDetails(`Error parseando evento: ${error.message}`, 'error');
                }
            };

            detailsEventSource.onerror = function() {
                addLogEntryToDetails('Error en la conexi√≥n SSE', 'error');
            };
        }

        // Funci√≥n para agregar entrada de log en detalles
        function addLogEntryToDetails(message, type = 'info') {
            const container = document.getElementById('detailsLogsContainer');
            const entry = document.createElement('div');
            entry.className = `log-entry log-${type}`;

            const timestamp = new Date().toLocaleTimeString();
            entry.textContent = `[${timestamp}] ${message}`;

            container.appendChild(entry);
            container.scrollTop = container.scrollHeight;
        }

        // Funci√≥n para mostrar formulario de agregar variable de entorno
        function showAddEnvVarForm() {
            currentEditingEnvVar = null;
            document.getElementById('envVarModalTitle').textContent = 'Agregar Variable de Entorno';
            document.getElementById('envVarKey').value = '';
            document.getElementById('envVarValue').value = '';
            document.getElementById('envVarIsSecret').checked = false;
            document.getElementById('envVarKey').disabled = false;
            document.getElementById('envVarModal').classList.remove('hidden');
        }

        // Funci√≥n para editar variable de entorno
        function editEnvVar(key) {
            const envVar = currentAppEnvVars.data.find(env => env.key === key);
            if (!envVar) return;

            currentEditingEnvVar = key;
            document.getElementById('envVarModalTitle').textContent = 'Editar Variable de Entorno';
            document.getElementById('envVarKey').value = envVar.key;
            document.getElementById('envVarValue').value = envVar.value;
            document.getElementById('envVarIsSecret').checked = envVar.is_secret;
            document.getElementById('envVarKey').disabled = true;
            document.getElementById('envVarModal').classList.remove('hidden');
        }

        // Funci√≥n para eliminar variable de entorno
        async function deleteEnvVar(key) {
            if (!confirm(`¬øEst√°s seguro de que quieres eliminar la variable "${key}"?`)) {
                return;
            }

            try {
                const response = await fetch(`/api/v1/apps/${currentAppDetails.id}/env/${key}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Variable de entorno eliminada', 'success');
                    loadAppEnvVars();
                } else {
                    const error = await response.json();
                    showNotification(`Error: ${error.message}`, 'error');
                }
            } catch (error) {
                showNotification('Error de conexi√≥n', 'error');
            }
        }

        // Funci√≥n para actualizar variables de entorno
        function refreshEnvVars() {
            loadAppEnvVars();
        }

        // Funci√≥n para cerrar modal de detalles
        function closeAppDetailsModal() {
            document.getElementById('appDetailsModal').classList.add('hidden');
            if (detailsEventSource) {
                detailsEventSource.close();
                detailsEventSource = null;
            }
            currentAppDetails = null;
            currentAppEnvVars = [];
        }

        // Funci√≥n para cerrar modal de variable de entorno
        function closeEnvVarModal() {
            document.getElementById('envVarModal').classList.add('hidden');
            currentEditingEnvVar = null;
        }

        // Manejar env√≠o del formulario de variable de entorno
        document.getElementById('envVarForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const key = document.getElementById('envVarKey').value.trim();
            const value = document.getElementById('envVarValue').value.trim();
            const isSecret = document.getElementById('envVarIsSecret').checked;

            if (!key || !value) {
                showNotification('Todos los campos son requeridos', 'error');
                return;
            }

            try {
                const isEditing = currentEditingEnvVar !== null;
                const url = isEditing
                    ? `/api/v1/apps/${currentAppDetails.id}/env/${key}`
                    : `/api/v1/apps/${currentAppDetails.id}/env`;

                const method = isEditing ? 'PUT' : 'POST';
                const payload = isEditing
                    ? { value: value, is_secret: isSecret }
                    : { key: key, value: value, is_secret: isSecret };

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload)
                });

                if (response.ok) {
                    showNotification(isEditing ? 'Variable actualizada' : 'Variable creada', 'success');
                    closeEnvVarModal();
                    loadAppEnvVars();
                } else {
                    const error = await response.json();
                    showNotification(`Error: ${error.message}`, 'error');
                }
            } catch (error) {
                showNotification('Error de conexi√≥n', 'error');
            }
        });
    </script>
}