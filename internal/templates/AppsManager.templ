package templates

templ AppsManager() {
    <div class="stats-section" id="statsSection">
        <div class="stat-card">
            <div class="stat-number" id="totalApps">-</div>
            <div class="stat-label">Total Apps</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="runningApps">-</div>
            <div class="stat-label">Ejecut√°ndose</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="deployingApps">-</div>
            <div class="stat-label">Deployando</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="errorApps">-</div>
            <div class="stat-label">Con Errores</div>
        </div>
    </div>

    <div class="apps-grid" id="appsGrid">
        <div class="loading">
            <h3>üîÑ Cargando aplicaciones...</h3>
        </div>
    </div>

    <!-- Modal para logs -->
    <div class="logs-modal" id="logsModal">
        <div class="logs-content">
            <div class="logs-header">
                <h3 id="modalTitle">Logs de Aplicaci√≥n</h3>
                <button class="close-btn" onclick="closeLogsModal()">&times;</button>
            </div>
            <div class="logs-body" id="modalLogs">
                <div class="log-entry log-info">Conectando a los logs...</div>
            </div>
        </div>
    </div>

    <!-- Botones flotantes -->
    <div class="floating-buttons">
        <button class="refresh-btn" onclick="loadApps()" title="Actualizar aplicaciones">
            üîÑ
        </button>
        <button class="maintenance-btn" onclick="openMaintenanceMenu()" title="Mantenimiento del sistema">
            üîß
        </button>
    </div>

    <!-- Men√∫ de mantenimiento -->
    <div class="maintenance-menu" id="maintenanceMenu">
        <div class="maintenance-content">
            <h3>üîß Mantenimiento del Sistema</h3>
            <div class="maintenance-actions">
                <button onclick="pruneImages()" class="btn btn-warning">üóëÔ∏è Limpiar Im√°genes</button>
                <button onclick="restartAllApps()" class="btn btn-danger">üîÑ Reiniciar Todas</button>
                <button onclick="exportAppsData()" class="btn btn-secondary">üì• Exportar Datos</button>
                <button onclick="closeMaintenanceMenu()" class="btn btn-secondary">‚ùå Cerrar</button>
            </div>
        </div>
    </div>

    <style>
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #2d2d2d;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            border-left: 4px solid #3498db;
            border: 1px solid #444;
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #3498db;
        }
        .stat-label {
            color: #bdc3c7;
            margin-top: 5px;
        }
        .apps-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .app-card {
            background: #2d2d2d;
            border: 1px solid #444;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .app-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
            border-color: #555;
        }
        .app-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .app-name {
            font-size: 1.2em;
            font-weight: 600;
            color: #ecf0f1;
        }
        .app-status {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: 600;
            text-transform: uppercase;
        }
        .status-running {
            background: #27ae60;
            color: #ecf0f1;
        }
        .status-deploying {
            background: #f39c12;
            color: #2c3e50;
        }
        .status-error {
            background: #e74c3c;
            color: #ecf0f1;
        }
        .status-stopped {
            background: #7f8c8d;
            color: #ecf0f1;
        }
        .app-details {
            margin-bottom: 15px;
        }
        .detail-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 0.9em;
        }
        .detail-label {
            color: #bdc3c7;
            font-weight: 500;
        }
        .detail-value {
            color: #ecf0f1;
            font-family: 'Courier New', monospace;
        }
        .app-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .logs-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            z-index: 1000;
        }
        .logs-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 800px;
            height: 80%;
            background: #1a1a1a;
            border-radius: 15px;
            overflow: hidden;
            border: 1px solid #444;
        }
        .logs-header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: #ecf0f1;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logs-body {
            height: calc(100% - 80px);
            background: #0f0f0f;
            color: #e0e0e0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            padding: 20px;
            overflow-y: auto;
            border-top: 1px solid #444;
        }
        .log-entry {
            margin-bottom: 5px;
            padding: 2px 0;
        }
        .log-info { color: #3498db; }
        .log-success { color: #27ae60; }
        .log-error { color: #e74c3c; }
        .log-warning { color: #f39c12; }
        .docker-event { color: #9b59b6; }
        .close-btn {
            background: none;
            border: none;
            color: #ecf0f1;
            font-size: 1.5em;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .loading {
            text-align: center;
            padding: 40px;
            color: #bdc3c7;
        }
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #bdc3c7;
        }
        .empty-state h3 {
            margin-bottom: 10px;
            color: #ecf0f1;
        }
        .empty-state a {
            color: #3498db;
            text-decoration: none;
        }
        .empty-state a:hover {
            text-decoration: underline;
        }
        .floating-buttons {
            position: fixed;
            bottom: 30px;
            right: 30px;
            display: flex;
            flex-direction: column;
            gap: 15px;
            z-index: 1000;
        }
        .refresh-btn, .maintenance-btn {
            width: 60px;
            height: 60px;
            border: none;
            border-radius: 50%;
            font-size: 1.5em;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0,0,0,0.4);
            transition: all 0.3s ease;
            color: #ecf0f1;
        }
        .refresh-btn {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        }
        .maintenance-btn {
            background: linear-gradient(135deg, #e67e22 0%, #f39c12 100%);
        }
        .refresh-btn:hover, .maintenance-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 25px rgba(0,0,0,0.5);
        }
        .maintenance-menu {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 2000;
            align-items: center;
            justify-content: center;
        }
        .maintenance-content {
            background: #2d2d2d;
            padding: 30px;
            border-radius: 15px;
            border: 1px solid #444;
            text-align: center;
            min-width: 400px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        }
        .maintenance-content h3 {
            color: #ecf0f1;
            margin-bottom: 20px;
            font-size: 1.4em;
        }
        .maintenance-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        .maintenance-actions .btn {
            padding: 12px 20px;
            font-size: 1em;
        }
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: #ecf0f1;
            font-weight: 600;
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        .notification.show {
            transform: translateX(0);
        }
        .notification.success {
            background: #27ae60;
        }
        .notification.error {
            background: #e74c3c;
        }
        .notification.warning {
            background: #f39c12;
            color: #2c3e50;
        }
    </style>

    <script>
        let apps = [];
        let eventSource = null;
        let currentModalAppId = null;

        // Funci√≥n para mostrar notificaciones
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }

        // Funci√≥n para cargar aplicaciones
        async function loadApps() {
            try {
                const response = await fetch('/api/v1/apps');
                if (response.ok) {
                    apps = await response.json();
                    updateStats();
                    renderApps();
                } else {
                    showNotification('Error cargando aplicaciones', 'error');
                }
            } catch (error) {
                showNotification('Error de conexi√≥n', 'error');
            }
        }

        // Funci√≥n para actualizar estad√≠sticas
        function updateStats() {
            const stats = {
                total: apps.data.length,
                running: apps.data.filter((app) => app.status === 'running').length,
                deploying: apps.data.filter((app) => app.status === 'deploying').length,
                error: apps.data.filter((app) => app.status === 'error').length
            };

            document.getElementById('totalApps').textContent = stats.total;
            document.getElementById('runningApps').textContent = stats.running;
            document.getElementById('deployingApps').textContent = stats.deploying;
            document.getElementById('errorApps').textContent = stats.error;
        }

        // Funci√≥n para renderizar aplicaciones
        function renderApps() {
            const grid = document.getElementById('appsGrid');

            if (apps.data.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <h3>üì≠ No hay aplicaciones</h3>
                        <p>A√∫n no has desplegado ninguna aplicaci√≥n.</p>
                        <p>Ve a <a href="/deploy">Deployment</a> para crear tu primera app.</p>
                    </div>
                `;
                return;
            }

            grid.innerHTML = apps.data.map((app) => {
                const appError = app.error_msg ? `
                        <div class="detail-row">
                            <span class="detail-label">Error:</span>
                            <span class="detail-value" style="color: #e74c3c;">${app.error_msg}</span>
                        </div>
                        ` : '';

                const appUrl = app.status === 'running' ? `
                            <a href="http://localhost:${app.port}" target="_blank" class="btn btn-primary">üåê Abrir</a>
                        ` : '';

                return `
                <div class="app-card">
                    <div class="app-header">
                        <div class="app-name">${app.name || 'Sin nombre'}</div>
                        <div class="app-status status-${app.status}">${getStatusText(app.status)}</div>
                    </div>
                    <div class="app-details">
                        <div class="detail-row">
                            <span class="detail-label">ID:</span>
                            <span class="detail-value">${app.id}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Puerto:</span>
                            <span class="detail-value">${app.port || 'N/A'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">URL:</span>
                            <span class="detail-value">http://localhost:${app.port || 'N/A'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Lenguaje:</span>
                            <span class="detail-value">${app.language || 'N/A'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Runtime:</span>
                            <span class="detail-value">${app.runtime_type || 'Docker'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Repo:</span>
                            <span class="detail-value">${app.repo_url || 'N/A'}</span>
                        </div>
                        ${appError}
                    </div>
                    <div class="app-actions">
                        ${appUrl}
                        <button onclick="viewLogs('${app.id}', '${app.name}')" class="btn btn-secondary">üìã Logs</button>
                        <button onclick="checkHealth('${app.id}')" class="btn btn-success">üîç Health Check</button>
                        <button onclick="redeployApp('${app.id}')" class="btn btn-warning">üîÑ Redeploy</button>
                        <button onclick="deleteApp('${app.id}', '${app.name}')" class="btn btn-danger">üóëÔ∏è Eliminar</button>
                    </div>
                </div>
            `;
            }).join('');
        }

        // Funci√≥n para obtener texto del estado
        function getStatusText(status) {
            const statusMap = {
                'running': 'Ejecut√°ndose',
                'deploying': 'Deployando',
                'error': 'Error',
                'stopped': 'Detenido'
            };
            return statusMap[status] || status;
        }

        // Funci√≥n para ver logs
        function viewLogs(appId, appName) {
            currentModalAppId = appId;
            document.getElementById('modalTitle').textContent = `Logs de ${appName}`;
            document.getElementById('modalLogs').innerHTML = '<div class="log-entry log-info">Conectando a los logs...</div>';
            document.getElementById('logsModal').style.display = 'block';

            // Conectar SSE para logs
            if (eventSource) {
                eventSource.close();
            }

            eventSource = new EventSource(`/api/v1/apps/${appId}/logs`);

            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    addLogEntry(data.message, data.type);
                } catch (error) {
                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');
                }
            };

            eventSource.onerror = function() {
                addLogEntry('Error en la conexi√≥n SSE', 'error');
            };
        }

        // Funci√≥n para agregar entrada de log
        function addLogEntry(message, type = 'info') {
            const logsContainer = document.getElementById('modalLogs');
            const entry = document.createElement('div');
            entry.className = `log-entry log-${type}`;

            const timestamp = new Date().toLocaleTimeString();
            entry.textContent = `[${timestamp}] ${message}`;

            logsContainer.appendChild(entry);
            logsContainer.scrollTop = logsContainer.scrollHeight;
        }

        // Funci√≥n para cerrar modal de logs
        function closeLogsModal() {
            if (eventSource) {
                eventSource.close();
                eventSource = null;
            }
            document.getElementById('logsModal').style.display = 'none';
            currentModalAppId = null;
        }

        // Funci√≥n para redeploy
        async function redeployApp(appId) {
            if (!confirm('¬øEst√°s seguro de que quieres hacer redeploy de esta aplicaci√≥n?')) {
                return;
            }

            try {
                const app = apps.data.find(a => a.id === appId);
                if (!app) {
                    showNotification('Aplicaci√≥n no encontrada', 'error');
                    return;
                }

                const response = await fetch('/api/v1/deploy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: app.name,
                        repo_url: app.repo_url
                    })
                });

                if (response.ok) {
                    showNotification('Redeploy iniciado correctamente', 'success');
                    setTimeout(loadApps, 2000); // Recargar despu√©s de 2 segundos
                } else {
                    const error = await response.json();
                    showNotification(`Error en redeploy: ${error.message}`, 'error');
                }
            } catch (error) {
                showNotification(`Error de red: ${error.message}`, 'error');
            }
        }

        // Funci√≥n para eliminar aplicaci√≥n
        async function deleteApp(appId, appName) {
            if (!confirm('¬øEst√°s seguro de que quieres eliminar la aplicaci√≥n "' + appName + '"?')) {
                return;
            }

            try {
                const response = await fetch('/api/v1/apps/' + appId, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Aplicaci√≥n eliminada correctamente', 'success');
                    loadApps(); // Recargar lista
                } else {
                    const error = await response.json();
                    showNotification('Error eliminando aplicaci√≥n: ' + error.message, 'error');
                }
            } catch (error) {
                showNotification('Error de red: ' + error.message, 'error');
            }
        }

        // Funci√≥n para health check
        async function checkHealth(appId) {
            try {
                const app = apps.data.find(a => a.id === appId);
                if (!app) {
                    showNotification('Aplicaci√≥n no encontrada', 'error');
                    return;
                }

                if (app.status !== 'running') {
                    showNotification('La aplicaci√≥n no est√° ejecut√°ndose', 'warning');
                    return;
                }

                showNotification('Verificando salud de la aplicaci√≥n...', 'info');

                // Intentar hacer request HTTP a la aplicaci√≥n
                const healthResponse = await fetch('http://localhost:' + app.port + '/health', {
                    method: 'GET',
                    timeout: 5000
                });

                if (healthResponse.ok) {
                    showNotification('‚úÖ Aplicaci√≥n saludable', 'success');
                } else {
                    showNotification('‚ö†Ô∏è Aplicaci√≥n responde pero con errores', 'warning');
                }
            } catch (error) {
                // Si no puede conectar, intentar un ping b√°sico
                try {
                    const app = apps.data.find(a => a.id === appId);
                    const pingResponse = await fetch('http://localhost:' + app.port, {
                        method: 'GET',
                        timeout: 5000
                    });

                    if (pingResponse.ok) {
                        showNotification('‚úÖ Aplicaci√≥n responde correctamente', 'success');
                    } else {
                        showNotification('‚ùå Aplicaci√≥n no responde correctamente', 'error');
                    }
                } catch (pingError) {
                    showNotification('‚ùå No se puede conectar a la aplicaci√≥n', 'error');
                }
            }
        }

        // Funci√≥n para limpiar im√°genes
        async function pruneImages() {
            if (!confirm('¬øEst√°s seguro de que quieres limpiar las im√°genes no utilizadas?')) {
                return;
            }

            try {
                showNotification('Limpiando im√°genes...', 'info');

                const response = await fetch('/api/v1/maintenance/prune-images', {
                    method: 'POST'
                });

                const result = await response.json();

                if (response.ok) {
                    showNotification('‚úÖ Im√°genes limpiadas exitosamente', 'success');
                } else {
                    showNotification('‚ùå Error limpiando im√°genes: ' + result.message, 'error');
                }
            } catch (error) {
                showNotification('‚ùå Error de conexi√≥n: ' + error.message, 'error');
            }
        }

        // Funci√≥n para reiniciar aplicaci√≥n
        async function restartApp(appId) {
            if (!confirm('¬øEst√°s seguro de que quieres reiniciar esta aplicaci√≥n?')) {
                return;
            }

            try {
                const app = apps.data.find(a => a.id === appId);
                if (!app) {
                    showNotification('Aplicaci√≥n no encontrada', 'error');
                    return;
                }

                showNotification('Reiniciando aplicaci√≥n...', 'info');

                // Primero hacer redeploy para reiniciar
                const response = await fetch('/api/v1/deploy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: app.name,
                        repo_url: app.repo_url
                    })
                });

                if (response.ok) {
                    showNotification('‚úÖ Aplicaci√≥n reiniciada correctamente', 'success');
                    setTimeout(loadApps, 2000);
                } else {
                    const error = await response.json();
                    showNotification('‚ùå Error reiniciando aplicaci√≥n: ' + error.message, 'error');
                }
            } catch (error) {
                showNotification('‚ùå Error de red: ' + error.message, 'error');
            }
        }

        // Cargar aplicaciones al iniciar
        document.addEventListener('DOMContentLoaded', function() {
            loadApps();

            // Recargar autom√°ticamente cada 30 segundos
            setInterval(loadApps, 30000);
        });

        // Funciones para el men√∫ de mantenimiento
        function openMaintenanceMenu() {
            document.getElementById('maintenanceMenu').style.display = 'flex';
        }

        function closeMaintenanceMenu() {
            document.getElementById('maintenanceMenu').style.display = 'none';
        }

        // Funci√≥n para reiniciar todas las aplicaciones
        async function restartAllApps() {
            if (!confirm('¬øEst√°s seguro de que quieres reiniciar TODAS las aplicaciones?')) {
                return;
            }

            closeMaintenanceMenu();
            showNotification('Reiniciando todas las aplicaciones...', 'info');

            const runningApps = apps.data.filter(app => app.status === 'running');

            for (const app of runningApps) {
                try {
                    await fetch('/api/v1/deploy', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            name: app.name,
                            repo_url: app.repo_url
                        })
                    });
                } catch (error) {
                    console.error('Error reiniciando app:', app.name, error);
                }
            }

            showNotification('Reinicio masivo iniciado', 'success');
            setTimeout(loadApps, 3000);
        }

        // Funci√≥n para exportar datos de aplicaciones
        function exportAppsData() {
            const data = {
                timestamp: new Date().toISOString(),
                total_apps: apps.data.length,
                stats: {
                    running: apps.data.filter(app => app.status === 'running').length,
                    deploying: apps.data.filter(app => app.status === 'deploying').length,
                    error: apps.data.filter(app => app.status === 'error').length
                },
                applications: apps.data
            };

            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'diplo-apps-' + new Date().toISOString().split('T')[0] + '.json';
            a.click();
            URL.revokeObjectURL(url);

            closeMaintenanceMenu();
            showNotification('Datos exportados exitosamente', 'success');
        }

        // Cerrar modal con Escape
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeLogsModal();
                closeMaintenanceMenu();
            }
        });
    </script>
}