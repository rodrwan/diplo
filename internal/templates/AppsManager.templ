package templates

templ AppsManager() {
    <!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diplo - Gestor de Aplicaciones</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: #0f0f0f;
            min-height: 100vh;
            color: #e0e0e0;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.5);
            overflow: hidden;
            border: 1px solid #333;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: #ecf0f1;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1em;
        }
        .content {
            padding: 30px;
        }
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #2d2d2d;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            border-left: 4px solid #3498db;
            border: 1px solid #444;
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #3498db;
        }
        .stat-label {
            color: #bdc3c7;
            margin-top: 5px;
        }
        .apps-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .app-card {
            background: #2d2d2d;
            border: 1px solid #444;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .app-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
            border-color: #555;
        }
        .app-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .app-name {
            font-size: 1.2em;
            font-weight: 600;
            color: #ecf0f1;
        }
        .app-status {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: 600;
            text-transform: uppercase;
        }
        .status-running {
            background: #27ae60;
            color: #ecf0f1;
        }
        .status-deploying {
            background: #f39c12;
            color: #2c3e50;
        }
        .status-error {
            background: #e74c3c;
            color: #ecf0f1;
        }
        .status-stopped {
            background: #7f8c8d;
            color: #ecf0f1;
        }
        .app-details {
            margin-bottom: 15px;
        }
        .detail-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 0.9em;
        }
        .detail-label {
            color: #bdc3c7;
            font-weight: 500;
        }
        .detail-value {
            color: #ecf0f1;
            font-family: 'Courier New', monospace;
        }
        .app-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            font-size: 0.9em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        .btn-primary {
            background: #3498db;
            color: #ecf0f1;
        }
        .btn-success {
            background: #27ae60;
            color: #ecf0f1;
        }
        .btn-warning {
            background: #f39c12;
            color: #2c3e50;
        }
        .btn-danger {
            background: #e74c3c;
            color: #ecf0f1;
        }
        .btn-secondary {
            background: #7f8c8d;
            color: #ecf0f1;
        }
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.4);
            filter: brightness(1.1);
        }
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .logs-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            z-index: 1000;
        }
        .logs-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 800px;
            height: 80%;
            background: #1a1a1a;
            border-radius: 15px;
            overflow: hidden;
            border: 1px solid #444;
        }
        .logs-header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: #ecf0f1;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .logs-body {
            height: calc(100% - 80px);
            background: #0f0f0f;
            color: #e0e0e0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            padding: 20px;
            overflow-y: auto;
            border-top: 1px solid #444;
        }
        .log-entry {
            margin-bottom: 5px;
            padding: 2px 0;
        }
        .log-info { color: #3498db; }
        .log-success { color: #27ae60; }
        .log-error { color: #e74c3c; }
        .log-warning { color: #f39c12; }
        .docker-event { color: #9b59b6; }
        .close-btn {
            background: none;
            border: none;
            color: #ecf0f1;
            font-size: 1.5em;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .loading {
            text-align: center;
            padding: 40px;
            color: #bdc3c7;
        }
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #bdc3c7;
        }
        .empty-state h3 {
            margin-bottom: 10px;
            color: #ecf0f1;
        }
        .empty-state a {
            color: #3498db;
            text-decoration: none;
        }
        .empty-state a:hover {
            text-decoration: underline;
        }
        .refresh-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: #3498db;
            color: #ecf0f1;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 1.5em;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0,0,0,0.4);
            transition: transform 0.2s ease;
        }
        .refresh-btn:hover {
            transform: scale(1.1);
            background: #2980b9;
        }
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: #ecf0f1;
            font-weight: 600;
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        .notification.show {
            transform: translateX(0);
        }
        .notification.success {
            background: #27ae60;
        }
        .notification.error {
            background: #e74c3c;
        }
        .notification.warning {
            background: #f39c12;
            color: #2c3e50;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Diplo - Gestor de Aplicaciones</h1>
            <p>Administra y monitorea todas tus aplicaciones desplegadas</p>
        </div>

        <div class="content">
            <div class="stats-section" id="statsSection">
                <div class="stat-card">
                    <div class="stat-number" id="totalApps">-</div>
                    <div class="stat-label">Total Apps</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="runningApps">-</div>
                    <div class="stat-label">Ejecutándose</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="deployingApps">-</div>
                    <div class="stat-label">Deployando</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="errorApps">-</div>
                    <div class="stat-label">Con Errores</div>
                </div>
            </div>

            <div class="apps-grid" id="appsGrid">
                <div class="loading">
                    <h3>🔄 Cargando aplicaciones...</h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para logs -->
    <div class="logs-modal" id="logsModal">
        <div class="logs-content">
            <div class="logs-header">
                <h3 id="modalTitle">Logs de Aplicación</h3>
                <button class="close-btn" onclick="closeLogsModal()">&times;</button>
            </div>
            <div class="logs-body" id="modalLogs">
                <div class="log-entry log-info">Conectando a los logs...</div>
            </div>
        </div>
    </div>

    <!-- Botón de refresh flotante -->
    <button class="refresh-btn" onclick="loadApps()" title="Actualizar aplicaciones">
        🔄
    </button>

    <script>
        let apps = [];
        let eventSource = null;
        let currentModalAppId = null;

        // Función para mostrar notificaciones
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }

        // Función para cargar aplicaciones
        async function loadApps() {
            try {
                const response = await fetch('/api/v1/apps');
                if (response.ok) {
                    apps = await response.json();
                    updateStats();
                    renderApps();
                } else {
                    showNotification('Error cargando aplicaciones', 'error');
                }
            } catch (error) {
                showNotification('Error de conexión', 'error');
            }
        }

        // Función para actualizar estadísticas
        function updateStats() {
            const stats = {
                total: apps.length,
                running: apps.filter(app => app.status === 'running').length,
                deploying: apps.filter(app => app.status === 'deploying').length,
                error: apps.filter(app => app.status === 'error').length
            };

            document.getElementById('totalApps').textContent = stats.total;
            document.getElementById('runningApps').textContent = stats.running;
            document.getElementById('deployingApps').textContent = stats.deploying;
            document.getElementById('errorApps').textContent = stats.error;
        }

        // Función para renderizar aplicaciones
        function renderApps() {
            const grid = document.getElementById('appsGrid');

            if (apps.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <h3>📭 No hay aplicaciones</h3>
                        <p>Aún no has desplegado ninguna aplicación.</p>
                        <p>Ve a <a href="/docker-events">Eventos Docker</a> para crear tu primera app.</p>
                    </div>
                `;
                return;
            }

            grid.innerHTML = apps.map(app => {
                console.log(app);
                const appError = app.error_msg ? `
                        <div class="detail-row">
                            <span class="detail-label">Error:</span>
                            <span class="detail-value" style="color: #e74c3c;">${app.error_msg}</span>
                        </div>
                        ` : '';

                const appUrl = app.status === 'running' ? `
                            <a href="http://localhost:${app.port}" target="_blank" class="btn btn-primary">🌐 Abrir</a>
                        ` : '';

                return `
                <div class="app-card">
                    <div class="app-header">
                        <div class="app-name">${app.name || 'Sin nombre'}</div>
                        <div class="app-status status-${app.status}">${getStatusText(app.status)}</div>
                    </div>
                    <div class="app-details">
                        <div class="detail-row">
                            <span class="detail-label">ID:</span>
                            <span class="detail-value">${app.id}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Puerto:</span>
                            <span class="detail-value">${app.port || 'N/A'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">URL:</span>
                            <span class="detail-value">http://localhost:${app.port || 'N/A'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Repo:</span>
                            <span class="detail-value">${app.repo_url || 'N/A'}</span>
                        </div>
                        ${appError}
                    </div>
                    <div class="app-actions">
                        ${appUrl}
                        <button onclick="viewLogs('${app.id}', '${app.name}')" class="btn btn-secondary">📋 Logs</button>
                        <button onclick="redeployApp('${app.id}')" class="btn btn-warning">🔄 Redeploy</button>
                        <button onclick="deleteApp('${app.id}', '${app.name}')" class="btn btn-danger">🗑️ Eliminar</button>
                    </div>
                </div>
            `;
            }).join('');
        }

        // Función para obtener texto del estado
        function getStatusText(status) {
            const statusMap = {
                'running': 'Ejecutándose',
                'deploying': 'Deployando',
                'error': 'Error',
                'stopped': 'Detenido'
            };
            return statusMap[status] || status;
        }

        // Función para ver logs
        function viewLogs(appId, appName) {
            currentModalAppId = appId;
            document.getElementById('modalTitle').textContent = `Logs de ${appName}`;
            document.getElementById('modalLogs').innerHTML = '<div class="log-entry log-info">Conectando a los logs...</div>';
            document.getElementById('logsModal').style.display = 'block';

            // Conectar SSE para logs
            if (eventSource) {
                eventSource.close();
            }

            eventSource = new EventSource(`/api/v1/apps/${appId}/logs`);

            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    addLogEntry(data.message, data.type);
                } catch (error) {
                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');
                }
            };

            eventSource.onerror = function() {
                addLogEntry('Error en la conexión SSE', 'error');
            };
        }

        // Función para agregar entrada de log
        function addLogEntry(message, type = 'info') {
            const logsContainer = document.getElementById('modalLogs');
            const entry = document.createElement('div');
            entry.className = `log-entry log-${type}`;

            const timestamp = new Date().toLocaleTimeString();
            entry.textContent = `[${timestamp}] ${message}`;

            logsContainer.appendChild(entry);
            logsContainer.scrollTop = logsContainer.scrollHeight;
        }

        // Función para cerrar modal de logs
        function closeLogsModal() {
            if (eventSource) {
                eventSource.close();
                eventSource = null;
            }
            document.getElementById('logsModal').style.display = 'none';
            currentModalAppId = null;
        }

        // Función para redeploy
        async function redeployApp(appId) {
            if (!confirm('¿Estás seguro de que quieres hacer redeploy de esta aplicación?')) {
                return;
            }

            try {
                const app = apps.find(a => a.id === appId);
                if (!app) {
                    showNotification('Aplicación no encontrada', 'error');
                    return;
                }

                const response = await fetch('/api/v1/deploy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: app.name,
                        repo_url: app.repo_url
                    })
                });

                if (response.ok) {
                    showNotification('Redeploy iniciado correctamente', 'success');
                    setTimeout(loadApps, 2000); // Recargar después de 2 segundos
                } else {
                    const error = await response.json();
                    showNotification(`Error en redeploy: ${error.message}`, 'error');
                }
            } catch (error) {
                showNotification(`Error de red: ${error.message}`, 'error');
            }
        }

        // Función para eliminar aplicación
        async function deleteApp(appId, appName) {
            if (!confirm(`¿Estás seguro de que quieres eliminar la aplicación "${appName}"?`)) {
                return;
            }

            try {
                const response = await fetch(`/api/v1/apps/${appId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Aplicación eliminada correctamente', 'success');
                    loadApps(); // Recargar lista
                } else {
                    const error = await response.json();
                    showNotification(`Error eliminando aplicación: ${error.message}`, 'error');
                }
            } catch (error) {
                showNotification(`Error de red: ${error.message}`, 'error');
            }
        }

        // Cargar aplicaciones al iniciar
        document.addEventListener('DOMContentLoaded', function() {
            loadApps();

            // Recargar automáticamente cada 30 segundos
            setInterval(loadApps, 30000);
        });

        // Cerrar modal con Escape
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeLogsModal();
            }
        });
    </script>
</body>
</html>
}