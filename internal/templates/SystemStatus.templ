package templates

templ SystemStatus() {
    <div class="status-header">
        <h1>üìä Estado del Sistema H√≠brido</h1>
        <p>Informaci√≥n detallada sobre runtimes, capacidades y estado del sistema</p>
    </div>

    <!-- Informaci√≥n del Sistema -->
    <div class="system-info-section">
        <div class="info-card">
            <h3>üíª Informaci√≥n del Sistema</h3>
            <div class="info-grid" id="systemInfo">
                <div class="info-item">
                    <span class="info-label">Sistema Operativo:</span>
                    <span class="info-value" id="systemOS">-</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Arquitectura:</span>
                    <span class="info-value" id="systemArch">-</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Hostname:</span>
                    <span class="info-value" id="systemHostname">-</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Uptime:</span>
                    <span class="info-value" id="systemUptime">-</span>
                </div>
            </div>
        </div>

        <div class="info-card">
            <h3>üèóÔ∏è Runtime Preferido</h3>
            <div class="runtime-preferred" id="preferredRuntimeCard">
                <div class="runtime-icon" id="preferredRuntimeIcon">ü§ñ</div>
                <div class="runtime-info">
                    <div class="runtime-name" id="preferredRuntimeName">-</div>
                    <div class="runtime-status" id="preferredRuntimeStatus">-</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Runtimes Disponibles -->
    <div class="runtimes-section">
        <h2>üöÄ Runtimes Disponibles</h2>
        <div class="runtimes-grid" id="runtimesGrid">
            <div class="loading">
                <h3>üîÑ Cargando informaci√≥n de runtimes...</h3>
            </div>
        </div>
    </div>

    <!-- Capacidades del Sistema -->
    <div class="capabilities-section">
        <h2>‚öôÔ∏è Capacidades del Sistema</h2>
        <div class="capabilities-grid">
            <div class="capability-card">
                <h3>üîß Lenguajes Soportados</h3>
                <div class="capability-content" id="supportedLanguages">
                    <div class="loading">Cargando...</div>
                </div>
            </div>
            <div class="capability-card">
                <h3>üê≥ Im√°genes Base</h3>
                <div class="capability-content" id="supportedImages">
                    <div class="loading">Cargando...</div>
                </div>
            </div>
            <div class="capability-card">
                <h3>üîå Funciones Disponibles</h3>
                <div class="capability-content" id="availableFeatures">
                    <div class="loading">Cargando...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Informaci√≥n de Aplicaciones -->
    <div class="apps-overview-section">
        <h2>üì± Resumen de Aplicaciones</h2>
        <div class="apps-stats" id="appsStats">
            <div class="stat-card">
                <div class="stat-icon">üìä</div>
                <div class="stat-info">
                    <div class="stat-number" id="totalAppsCount">-</div>
                    <div class="stat-label">Total de Apps</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">‚úÖ</div>
                <div class="stat-info">
                    <div class="stat-number" id="runningAppsCount">-</div>
                    <div class="stat-label">Ejecut√°ndose</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">üîÑ</div>
                <div class="stat-info">
                    <div class="stat-number" id="deployingAppsCount">-</div>
                    <div class="stat-label">Deployando</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">‚ùå</div>
                <div class="stat-info">
                    <div class="stat-number" id="errorAppsCount">-</div>
                    <div class="stat-label">Con Errores</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Acciones del Sistema -->
    <div class="system-actions">
        <h2>üîß Mantenimiento del Sistema</h2>
        <div class="actions-grid">
            <button onclick="pruneImages()" class="action-btn btn-warning">
                üóëÔ∏è Limpiar Im√°genes
            </button>
            <button onclick="refreshStatus()" class="action-btn btn-primary">
                üîÑ Actualizar Estado
            </button>
            <button onclick="exportSystemInfo()" class="action-btn btn-secondary">
                üì• Exportar Informaci√≥n
            </button>
        </div>
    </div>

    <style>
        .status-header {
            text-align: center;
            margin-bottom: 30px;
            background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%);
            color: #ecf0f1;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        }
        .status-header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        .status-header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .system-info-section {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .info-card {
            background: #2d2d2d;
            padding: 25px;
            border-radius: 15px;
            border: 1px solid #444;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }
        .info-card h3 {
            color: #ecf0f1;
            margin-bottom: 20px;
            font-size: 1.3em;
        }
        .info-grid {
            display: grid;
            gap: 15px;
        }
        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #444;
        }
        .info-item:last-child {
            border-bottom: none;
        }
        .info-label {
            color: #bdc3c7;
            font-weight: 500;
        }
        .info-value {
            color: #3498db;
            font-family: 'Courier New', monospace;
            font-weight: 600;
        }

        .runtime-preferred {
            display: flex;
            align-items: center;
            gap: 20px;
            padding: 20px;
            background: #1a1a1a;
            border-radius: 10px;
            border: 2px solid #3498db;
        }
        .runtime-icon {
            font-size: 3em;
            line-height: 1;
        }
        .runtime-info {
            flex: 1;
        }
        .runtime-name {
            font-size: 1.2em;
            font-weight: 600;
            color: #ecf0f1;
            margin-bottom: 5px;
        }
        .runtime-status {
            color: #27ae60;
            font-size: 0.9em;
        }

        .runtimes-section, .capabilities-section, .apps-overview-section {
            margin-bottom: 40px;
        }
        .runtimes-section h2, .capabilities-section h2, .apps-overview-section h2 {
            color: #ecf0f1;
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .runtimes-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        .runtime-card {
            background: #2d2d2d;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #444;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .runtime-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.4);
        }
        .runtime-card.available {
            border-color: #27ae60;
        }
        .runtime-card.unavailable {
            border-color: #e74c3c;
            opacity: 0.7;
        }
        .runtime-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }
        .runtime-header .runtime-icon {
            font-size: 2em;
        }
        .runtime-title {
            font-size: 1.2em;
            font-weight: 600;
            color: #ecf0f1;
        }
        .runtime-availability {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 600;
            text-transform: uppercase;
        }
        .runtime-availability.available {
            background: #27ae60;
            color: #ecf0f1;
        }
        .runtime-availability.unavailable {
            background: #e74c3c;
            color: #ecf0f1;
        }
        .runtime-details {
            color: #bdc3c7;
            font-size: 0.9em;
            line-height: 1.4;
        }

        .capabilities-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        .capability-card {
            background: #2d2d2d;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #444;
            min-height: 200px;
        }
        .capability-card h3 {
            color: #ecf0f1;
            margin-bottom: 15px;
            font-size: 1.1em;
        }
        .capability-content {
            color: #bdc3c7;
            line-height: 1.6;
        }
        .capability-list {
            list-style: none;
            padding: 0;
        }
        .capability-list li {
            padding: 5px 0;
            border-bottom: 1px solid #444;
        }
        .capability-list li:last-child {
            border-bottom: none;
        }
        .capability-tag {
            display: inline-block;
            background: #3498db;
            color: #ecf0f1;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            margin: 2px;
        }

        .apps-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        .stat-card {
            background: #2d2d2d;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #444;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        .stat-icon {
            font-size: 2em;
            line-height: 1;
        }
        .stat-number {
            font-size: 1.8em;
            font-weight: bold;
            color: #3498db;
        }
        .stat-label {
            color: #bdc3c7;
            font-size: 0.9em;
        }

        .system-actions {
            text-align: center;
            padding: 30px;
            background: #2d2d2d;
            border-radius: 15px;
            border: 1px solid #444;
        }
        .system-actions h2 {
            color: #ecf0f1;
            margin-bottom: 20px;
            font-size: 1.4em;
        }
        .actions-grid {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        .action-btn {
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.4);
        }

        .loading {
            text-align: center;
            color: #bdc3c7;
            font-style: italic;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .system-info-section {
                grid-template-columns: 1fr;
            }
            .actions-grid {
                flex-direction: column;
                align-items: center;
            }
            .action-btn {
                width: 100%;
                max-width: 300px;
            }
        }
    </style>

    <script>
        let systemStatusData = null;
        let appsData = null;

        // Inicializar p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            loadSystemStatus();
            loadAppsOverview();
        });

        // Cargar estado del sistema
        async function loadSystemStatus() {
            try {
                const response = await fetch('/api/v1/status');
                const data = await response.json();
                systemStatusData = data.data;

                updateSystemInfo(systemStatusData);
                updateRuntimesGrid(systemStatusData);
                updateCapabilities(systemStatusData);

            } catch (error) {
                console.error('Error cargando estado del sistema:', error);
            }
        }

        // Actualizar informaci√≥n del sistema
        function updateSystemInfo(data) {
            document.getElementById('systemOS').textContent = data.system.os || 'N/A';
            document.getElementById('systemArch').textContent = data.system.architecture || 'N/A';
            document.getElementById('systemHostname').textContent = window.location.hostname || 'localhost';
            document.getElementById('systemUptime').textContent = formatUptime(Date.now() - new Date(data.timestamp).getTime());

            // Runtime preferido
            const preferredRuntime = data.runtime.preferred;
            document.getElementById('preferredRuntimeName').textContent = preferredRuntime.toUpperCase();
            document.getElementById('preferredRuntimeStatus').textContent = 'Activo y disponible';
            document.getElementById('preferredRuntimeIcon').textContent = getRuntimeIcon(preferredRuntime);
        }

        // Actualizar grid de runtimes
        function updateRuntimesGrid(data) {
            const grid = document.getElementById('runtimesGrid');
            const availableRuntimes = data.runtime.available || [];

            grid.innerHTML = '';

            const allRuntimes = [
                { name: 'docker', title: 'Docker', icon: 'üê≥', description: 'Contenedores Docker con API nativa' },
                { name: 'lxc', title: 'LXC', icon: 'üì¶', description: 'Contenedores Linux ligeros' },
                { name: 'containerd', title: 'containerd', icon: 'üèóÔ∏è', description: 'Runtime de contenedores de alto rendimiento' }
            ];

            allRuntimes.forEach(runtime => {
                const isAvailable = availableRuntimes.includes(runtime.name);
                const card = document.createElement('div');
                card.className = 'runtime-card ' + (isAvailable ? 'available' : 'unavailable');

                card.innerHTML = '<div class="runtime-header">' +
                    '<div class="runtime-icon">' + runtime.icon + '</div>' +
                    '<div class="runtime-title">' + runtime.title + '</div>' +
                    '<div class="runtime-availability ' + (isAvailable ? 'available' : 'unavailable') + '">' +
                    (isAvailable ? 'Disponible' : 'No disponible') +
                    '</div>' +
                    '</div>' +
                    '<div class="runtime-details">' +
                    runtime.description +
                    '</div>';

                grid.appendChild(card);
            });
        }

        // Actualizar capacidades
        function updateCapabilities(data) {
            // Lenguajes soportados
            const languagesEl = document.getElementById('supportedLanguages');
            const languages = data.runtime.supported_languages || [];
                        languagesEl.innerHTML = languages.map(lang =>
                '<span class="capability-tag">' + lang.toUpperCase() + '</span>'
            ).join('');

            // Im√°genes soportadas
            const imagesEl = document.getElementById('supportedImages');
            const images = data.runtime.supported_images || [];
            imagesEl.innerHTML = '<ul class="capability-list">' +
                images.map(img => '<li>' + img + '</li>').join('') +
                '</ul>';

            // Funciones disponibles
            const featuresEl = document.getElementById('availableFeatures');
            const features = [
                'Deployment autom√°tico',
                'Detecci√≥n de lenguajes',
                'Health checks',
                'Logs en tiempo real',
                'Gesti√≥n de puertos',
                'Limpieza autom√°tica'
            ];
            featuresEl.innerHTML = '<ul class="capability-list">' +
                features.map(feature => '<li>' + feature + '</li>').join('') +
                '</ul>';
        }

        // Cargar resumen de aplicaciones
        async function loadAppsOverview() {
            try {
                const response = await fetch('/api/v1/apps');
                const data = await response.json();
                appsData = data.data || [];

                updateAppsStats(appsData);

            } catch (error) {
                console.error('Error cargando aplicaciones:', error);
            }
        }

        // Actualizar estad√≠sticas de aplicaciones
        function updateAppsStats(apps) {
            const totalApps = apps.length;
            const runningApps = apps.filter(app => app.status === 'running').length;
            const deployingApps = apps.filter(app => app.status === 'deploying').length;
            const errorApps = apps.filter(app => app.status === 'error').length;

            document.getElementById('totalAppsCount').textContent = totalApps;
            document.getElementById('runningAppsCount').textContent = runningApps;
            document.getElementById('deployingAppsCount').textContent = deployingApps;
            document.getElementById('errorAppsCount').textContent = errorApps;
        }

        // Utilidades
        function getRuntimeIcon(runtime) {
            const icons = {
                'docker': 'üê≥',
                'lxc': 'üì¶',
                'containerd': 'üèóÔ∏è'
            };
            return icons[runtime] || 'ü§ñ';
        }

        function formatUptime(ms) {
            const seconds = Math.floor(ms / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);

            if (days > 0) return days + 'd ' + (hours % 24) + 'h';
            if (hours > 0) return hours + 'h ' + (minutes % 60) + 'm';
            if (minutes > 0) return minutes + 'm';
            return seconds + 's';
        }

        // Acciones del sistema
        async function pruneImages() {
            try {
                const response = await fetch('/api/v1/maintenance/prune-images', {
                    method: 'POST'
                });
                const result = await response.json();

                if (response.ok) {
                    alert('‚úÖ Im√°genes limpiadas exitosamente');
                } else {
                    alert('‚ùå Error limpiando im√°genes: ' + result.message);
                }
            } catch (error) {
                alert('‚ùå Error de conexi√≥n: ' + error.message);
            }
        }

        function refreshStatus() {
            loadSystemStatus();
            loadAppsOverview();
        }

        function exportSystemInfo() {
            const info = {
                system: systemStatusData,
                apps: appsData,
                timestamp: new Date().toISOString()
            };

            const blob = new Blob([JSON.stringify(info, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'diplo-system-info-' + new Date().toISOString().split('T')[0] + '.json';
            a.click();
            URL.revokeObjectURL(url);
        }
    </script>
}