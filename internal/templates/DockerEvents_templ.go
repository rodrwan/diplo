// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DockerEvents() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"es\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Diplo - Eventos Docker en Tiempo Real</title><style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background: #0f0f0f;\n            min-height: 100vh;\n            color: #e0e0e0;\n        }\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            background: #1a1a1a;\n            border-radius: 15px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.5);\n            overflow: hidden;\n            border: 1px solid #333;\n        }\n        .header {\n            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n            color: #ecf0f1;\n            padding: 30px;\n            text-align: center;\n        }\n        .header h1 {\n            margin: 0;\n            font-size: 2.5em;\n            font-weight: 300;\n        }\n        .header p {\n            margin: 10px 0 0 0;\n            opacity: 0.9;\n            font-size: 1.1em;\n        }\n        .content {\n            padding: 30px;\n        }\n        .form-section {\n            background: #2d2d2d;\n            padding: 25px;\n            border-radius: 10px;\n            margin-bottom: 30px;\n            border: 1px solid #444;\n        }\n        .form-group {\n            margin-bottom: 20px;\n        }\n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 600;\n            color: #ecf0f1;\n        }\n        input[type=\"text\"], input[type=\"url\"] {\n            width: 100%;\n            padding: 12px;\n            border: 2px solid #444;\n            border-radius: 8px;\n            font-size: 16px;\n            transition: border-color 0.3s ease;\n            box-sizing: border-box;\n            background: #1a1a1a;\n            color: #e0e0e0;\n        }\n        input[type=\"text\"]:focus, input[type=\"url\"]:focus {\n            outline: none;\n            border-color: #3498db;\n        }\n        button {\n            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n            color: #ecf0f1;\n            border: none;\n            padding: 15px 30px;\n            border-radius: 8px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: transform 0.2s ease;\n        }\n        button:hover {\n            transform: translateY(-2px);\n            filter: brightness(1.1);\n        }\n        button:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n        }\n        .logs-section {\n            background: #0f0f0f;\n            border-radius: 10px;\n            padding: 20px;\n            margin-top: 30px;\n            height: 500px;\n            overflow-y: auto;\n            font-family: 'Courier New', monospace;\n            font-size: 14px;\n            line-height: 1.5;\n            border: 1px solid #444;\n        }\n        .log-entry {\n            color: #e0e0e0;\n            margin-bottom: 8px;\n            padding: 8px;\n            border-radius: 5px;\n            border-left: 4px solid #444;\n        }\n        .log-info {\n            background: rgba(52, 152, 219, 0.1);\n            border-left-color: #3498db;\n            color: #3498db;\n        }\n        .log-success {\n            background: rgba(39, 174, 96, 0.1);\n            border-left-color: #27ae60;\n            color: #27ae60;\n        }\n        .log-error {\n            background: rgba(231, 76, 60, 0.1);\n            border-left-color: #e74c3c;\n            color: #e74c3c;\n        }\n        .log-warning {\n            background: rgba(243, 156, 18, 0.1);\n            border-left-color: #f39c12;\n            color: #f39c12;\n        }\n        .docker-event {\n            background: rgba(155, 89, 182, 0.1);\n            border-left-color: #9b59b6;\n            color: #9b59b6;\n        }\n        .status-indicator {\n            display: inline-block;\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            margin-right: 10px;\n        }\n        .status-connecting {\n            background: #f39c12;\n            animation: pulse 1.5s infinite;\n        }\n        .status-connected {\n            background: #27ae60;\n        }\n        .status-disconnected {\n            background: #e74c3c;\n        }\n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n        .event-details {\n            margin-top: 10px;\n            padding: 10px;\n            background: rgba(255,255,255,0.05);\n            border-radius: 5px;\n            font-size: 12px;\n        }\n        .event-data {\n            color: #bdc3c7;\n            margin-top: 5px;\n        }\n        .timestamp {\n            color: #7f8c8d;\n            font-size: 12px;\n        }\n    </style></head><body><div class=\"container\"><div class=\"header\"><h1>üöÄ Diplo - Eventos Docker</h1><p>Monitoreo en tiempo real del proceso de deployment</p></div><div class=\"content\"><div class=\"form-section\"><h2>Configuraci√≥n de Deployment</h2><div class=\"form-group\"><label for=\"appName\">Nombre de la Aplicaci√≥n:</label> <input type=\"text\" id=\"appName\" placeholder=\"mi-aplicacion\" value=\"test-app\"></div><div class=\"form-group\"><label for=\"repoUrl\">URL del Repositorio:</label> <input type=\"url\" id=\"repoUrl\" placeholder=\"https://github.com/usuario/repo\" value=\"https://github.com/rodrwan/diplo\"></div><button onclick=\"startDeployment()\" id=\"deployBtn\">üöÄ Iniciar Deployment</button></div><div class=\"form-section\"><h2>Estado de Conexi√≥n</h2><p><span class=\"status-indicator\" id=\"statusIndicator\"></span> <span id=\"statusText\">Desconectado</span></p><button onclick=\"connectSSE()\" id=\"connectBtn\">üì° Conectar SSE</button> <button onclick=\"disconnectSSE()\" id=\"disconnectBtn\" style=\"display: none;\">‚ùå Desconectar</button></div><div class=\"logs-section\" id=\"logsContainer\"><div class=\"log-entry log-info\"><strong>üìã Sistema</strong> - P√°gina cargada. Listo para monitorear eventos Docker.</div></div></div></div><script>\n        let eventSource = null;\n        let currentAppId = null;\n\n        function updateStatus(status, text) {\n            const indicator = document.getElementById('statusIndicator');\n            const statusText = document.getElementById('statusText');\n\n            indicator.className = 'status-indicator status-' + status;\n            statusText.textContent = text;\n        }\n\n        function addLogEntry(message, type = 'info', data = null) {\n            const logsContainer = document.getElementById('logsContainer');\n            const logEntry = document.createElement('div');\n            logEntry.className = `log-entry log-${type}`;\n\n            const timestamp = new Date().toLocaleTimeString();\n            let content = `<strong>‚è∞ ${timestamp}</strong> - ${message}`;\n\n            if (data) {\n                content += `<div class=\"event-details\">\n                    <div class=\"event-data\"><strong>Datos:</strong> ${JSON.stringify(data, null, 2)}</div>\n                </div>`;\n            }\n\n            logEntry.innerHTML = content;\n            logsContainer.appendChild(logEntry);\n            logsContainer.scrollTop = logsContainer.scrollHeight;\n        }\n\n        function connectSSE() {\n            if (eventSource) {\n                eventSource.close();\n            }\n\n            updateStatus('connecting', 'Conectando...');\n\n            // Verificar que tenemos un App ID v√°lido\n            if (!currentAppId) {\n                addLogEntry('Error: No hay una aplicaci√≥n activa. Inicia un deployment primero.', 'error');\n                updateStatus('disconnected', 'Sin aplicaci√≥n');\n                return;\n            }\n\n            // Usar el App ID actual para la conexi√≥n SSE\n            eventSource = new EventSource(`/api/v1/apps/${currentAppId}/logs`);\n\n            eventSource.onopen = function() {\n                updateStatus('connected', 'Conectado');\n                document.getElementById('connectBtn').style.display = 'none';\n                document.getElementById('disconnectBtn').style.display = 'inline-block';\n                addLogEntry('Conexi√≥n SSE establecida', 'success');\n            };\n\n            eventSource.onmessage = function(event) {\n                try {\n                    const data = JSON.parse(event.data);\n\n                    if (data.type === 'docker_event') {\n                        addLogEntry(`üê≥ ${data.message}`, 'docker-event', data.data);\n                    } else if (data.type === 'log') {\n                        addLogEntry(`üìù ${data.message}`, 'info');\n                    } else if (data.type === 'success') {\n                        addLogEntry(`‚úÖ ${data.message}`, 'success');\n                    } else if (data.type === 'error') {\n                        addLogEntry(`‚ùå ${data.message}`, 'error');\n                    } else if (data.type === 'warning') {\n                        addLogEntry(`‚ö†Ô∏è ${data.message}`, 'warning');\n                    } else {\n                        addLogEntry(`‚ÑπÔ∏è ${data.message}`, 'info');\n                    }\n                } catch (error) {\n                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');\n                }\n            };\n\n            eventSource.onerror = function() {\n                updateStatus('disconnected', 'Error de conexi√≥n');\n                addLogEntry('Error en la conexi√≥n SSE', 'error');\n            };\n        }\n\n        function disconnectSSE() {\n            if (eventSource) {\n                eventSource.close();\n                eventSource = null;\n            }\n            updateStatus('disconnected', 'Desconectado');\n            document.getElementById('connectBtn').style.display = 'inline-block';\n            document.getElementById('disconnectBtn').style.display = 'none';\n            addLogEntry('Conexi√≥n SSE cerrada', 'info');\n        }\n\n        async function startDeployment() {\n            const appName = document.getElementById('appName').value;\n            const repoUrl = document.getElementById('repoUrl').value;\n\n            if (!appName || !repoUrl) {\n                addLogEntry('Por favor, completa todos los campos', 'error');\n                return;\n            }\n\n            const deployBtn = document.getElementById('deployBtn');\n            deployBtn.disabled = true;\n            deployBtn.textContent = '‚è≥ Deploying...';\n\n            addLogEntry(`Iniciando deployment de: ${appName}`, 'info');\n\n            try {\n                const response = await fetch('/api/v1/deploy', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: appName,\n                        repo_url: repoUrl\n                    })\n                });\n\n                const result = await response.json();\n\n                if (response.ok) {\n                    currentAppId = result.id;\n                    addLogEntry(`Deployment iniciado. App ID: ${result.id}`, 'success');\n                    addLogEntry(`URL: ${result.url}`, 'info');\n\n                    // Conectar autom√°ticamente al SSE\n                    setTimeout(() => {\n                        connectSSE();\n                    }, 1000);\n                } else {\n                    addLogEntry(`Error en deployment: ${result.message || 'Error desconocido'}`, 'error');\n                }\n            } catch (error) {\n                addLogEntry(`Error de red: ${error.message}`, 'error');\n            } finally {\n                deployBtn.disabled = false;\n                deployBtn.textContent = 'üöÄ Iniciar Deployment';\n            }\n        }\n\n        // Inicializar estado\n        updateStatus('disconnected', 'Desconectado');\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
