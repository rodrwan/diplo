// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DockerEvents() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"deployment-header\"><h1>🚀 Deployment Center</h1><p>Despliega aplicaciones automáticamente desde repositorios Git</p></div><!-- Sistema de Status --><div class=\"status-section\"><div class=\"status-card\" id=\"systemStatus\"><h3>📊 Estado del Sistema</h3><div class=\"status-grid\"><div class=\"status-item\"><span class=\"status-label\">Runtime Preferido:</span> <span class=\"status-value\" id=\"preferredRuntime\">-</span></div><div class=\"status-item\"><span class=\"status-label\">Runtimes Disponibles:</span> <span class=\"status-value\" id=\"availableRuntimes\">-</span></div><div class=\"status-item\"><span class=\"status-label\">Lenguajes Soportados:</span> <span class=\"status-value\" id=\"supportedLanguages\">-</span></div></div></div><div class=\"status-card\"><h3>🔗 Conexión SSE</h3><div class=\"connection-status\"><span class=\"status-indicator\" id=\"statusIndicator\"></span> <span id=\"statusText\">Desconectado</span></div><div class=\"connection-actions\"><button onclick=\"connectSSE()\" id=\"connectBtn\" class=\"btn btn-secondary\">📡 Conectar</button> <button onclick=\"disconnectSSE()\" id=\"disconnectBtn\" class=\"btn btn-danger\" style=\"display: none;\">❌ Desconectar</button></div></div></div><!-- Formulario de Deployment Mejorado --><div class=\"deployment-form\"><h2>⚙️ Configuración de Deployment</h2><div class=\"form-row\"><div class=\"form-group\"><label for=\"appName\">Nombre de la Aplicación:</label> <input type=\"text\" id=\"appName\" placeholder=\"mi-aplicacion\" value=\"test-app-web-example\"></div><div class=\"form-group\"><label for=\"repoUrl\">URL del Repositorio:</label> <input type=\"url\" id=\"repoUrl\" placeholder=\"https://github.com/usuario/repo\" value=\"https://github.com/rodrwan/web-example\"></div></div><div class=\"form-row\"><div class=\"form-group\"><label for=\"runtimeType\">Runtime:</label> <select id=\"runtimeType\"><option value=\"\">🤖 Auto-detectar (Recomendado)</option> <option value=\"docker\">🐳 Docker</option> <option value=\"lxc\">📦 LXC</option> <option value=\"containerd\">🏗️ containerd</option></select></div><div class=\"form-group\"><label for=\"languageHint\">Lenguaje (Opcional):</label> <select id=\"languageHint\"><option value=\"\">🔍 Auto-detectar</option> <option value=\"go\">Go</option> <option value=\"javascript\">JavaScript/Node.js</option> <option value=\"python\">Python</option> <option value=\"rust\">Rust</option> <option value=\"java\">Java</option></select></div></div><!-- Variables de Entorno --><div class=\"env-vars-section\"><h3>🔧 Variables de Entorno</h3><div class=\"env-vars-help\"><p>Define variables de entorno que estarán disponibles en el contenedor de tu aplicación.</p></div><div id=\"envVarsContainer\"><div class=\"env-var-row\"><input type=\"text\" placeholder=\"NOMBRE_VARIABLE\" class=\"env-key\"> <input type=\"text\" placeholder=\"valor\" class=\"env-value\"> <button onclick=\"removeEnvVar(this)\" class=\"btn btn-danger btn-sm\">❌</button></div></div><div class=\"env-actions\"><button onclick=\"addEnvVar()\" class=\"btn btn-secondary btn-sm\">➕ Agregar Variable</button> <button onclick=\"clearEnvVars()\" class=\"btn btn-warning btn-sm\">🗑️ Limpiar Todo</button></div></div><div class=\"deployment-actions\"><button onclick=\"startDeployment()\" id=\"deployBtn\" class=\"btn btn-primary\">🚀 Iniciar Deployment</button> <button onclick=\"validateRepo()\" id=\"validateBtn\" class=\"btn btn-secondary\">🔍 Validar Repositorio</button></div></div><!-- Logs Section Mejorada --><div class=\"logs-section\" id=\"logsContainer\"><div class=\"logs-header\"><h3>📋 Logs de Deployment</h3><div class=\"logs-controls\"><button onclick=\"clearLogs()\" class=\"btn btn-secondary btn-sm\">🗑️ Limpiar</button> <button onclick=\"exportLogs()\" class=\"btn btn-secondary btn-sm\">📥 Exportar</button></div></div><div class=\"logs-content\" id=\"logsContent\"><div class=\"log-entry log-info\"><strong>📋 Sistema</strong> - Deployment Center cargado. Listo para deployments.</div></div></div><style>\n        .deployment-header {\n            text-align: center;\n            margin-bottom: 30px;\n            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n            color: #ecf0f1;\n            padding: 40px;\n            border-radius: 15px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.5);\n        }\n        .deployment-header h1 {\n            font-size: 2.5em;\n            margin-bottom: 10px;\n            font-weight: 300;\n        }\n        .deployment-header p {\n            font-size: 1.2em;\n            opacity: 0.9;\n        }\n\n        .status-section {\n            display: grid;\n            grid-template-columns: 2fr 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        .status-card {\n            background: #2d2d2d;\n            padding: 25px;\n            border-radius: 10px;\n            border: 1px solid #444;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.3);\n        }\n        .status-card h3 {\n            color: #ecf0f1;\n            margin-bottom: 15px;\n            font-size: 1.2em;\n        }\n        .status-grid {\n            display: grid;\n            gap: 10px;\n        }\n        .status-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 8px 0;\n            border-bottom: 1px solid #444;\n        }\n        .status-item:last-child {\n            border-bottom: none;\n        }\n        .status-label {\n            color: #bdc3c7;\n            font-weight: 500;\n        }\n        .status-value {\n            color: #3498db;\n            font-family: 'Courier New', monospace;\n            font-weight: 600;\n        }\n        .connection-status {\n            margin-bottom: 15px;\n            padding: 10px;\n            background: #1a1a1a;\n            border-radius: 5px;\n            text-align: center;\n        }\n        .connection-actions {\n            text-align: center;\n        }\n\n        .deployment-form {\n            background: #2d2d2d;\n            padding: 30px;\n            border-radius: 15px;\n            margin-bottom: 30px;\n            border: 1px solid #444;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.3);\n        }\n        .deployment-form h2 {\n            color: #ecf0f1;\n            margin-bottom: 25px;\n            font-size: 1.4em;\n        }\n        .form-row {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        .form-group {\n            margin-bottom: 20px;\n        }\n        .form-group label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 600;\n            color: #ecf0f1;\n        }\n        .form-group input, .form-group select {\n            width: 100%;\n            padding: 12px;\n            border: 2px solid #444;\n            border-radius: 8px;\n            font-size: 16px;\n            transition: border-color 0.3s ease;\n            background: #1a1a1a;\n            color: #e0e0e0;\n        }\n        .form-group input:focus, .form-group select:focus {\n            outline: none;\n            border-color: #3498db;\n        }\n        .deployment-actions {\n            text-align: center;\n            margin-top: 30px;\n        }\n        .deployment-actions .btn {\n            margin: 0 10px;\n            padding: 15px 30px;\n            font-size: 1.1em;\n        }\n\n        /* Estilos para Variables de Entorno */\n        .env-vars-section {\n            margin-top: 30px;\n            padding: 25px;\n            background: #1a1a1a;\n            border-radius: 10px;\n            border: 1px solid #444;\n        }\n        .env-vars-section h3 {\n            color: #ecf0f1;\n            margin-bottom: 15px;\n            font-size: 1.2em;\n        }\n        .env-vars-help {\n            margin-bottom: 20px;\n            padding: 10px;\n            background: #2d2d2d;\n            border-radius: 5px;\n            border-left: 4px solid #3498db;\n        }\n        .env-vars-help p {\n            color: #bdc3c7;\n            margin: 0;\n            font-size: 0.9em;\n        }\n        .env-var-row {\n            display: grid;\n            grid-template-columns: 1fr 1fr auto;\n            gap: 10px;\n            margin-bottom: 10px;\n            align-items: center;\n        }\n        .env-key, .env-value {\n            padding: 8px 12px;\n            border: 1px solid #444;\n            border-radius: 5px;\n            background: #2d2d2d;\n            color: #e0e0e0;\n            font-size: 14px;\n        }\n        .env-key {\n            font-family: 'Courier New', monospace;\n            text-transform: uppercase;\n        }\n        .env-key:focus, .env-value:focus {\n            outline: none;\n            border-color: #3498db;\n        }\n        .env-actions {\n            margin-top: 15px;\n            text-align: center;\n        }\n        .env-actions .btn {\n            margin: 0 5px;\n            padding: 8px 15px;\n            font-size: 0.9em;\n        }\n\n        .logs-section {\n            background: #1a1a1a;\n            border-radius: 15px;\n            border: 1px solid #444;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.3);\n            overflow: hidden;\n        }\n        .logs-header {\n            background: linear-gradient(135deg, #34495e 0%, #2c3e50 100%);\n            color: #ecf0f1;\n            padding: 20px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        .logs-header h3 {\n            margin: 0;\n            font-size: 1.3em;\n        }\n        .logs-controls {\n            display: flex;\n            gap: 10px;\n        }\n        .logs-content {\n            background: #0f0f0f;\n            padding: 20px;\n            height: 500px;\n            overflow-y: auto;\n            font-family: 'Courier New', monospace;\n            font-size: 14px;\n            line-height: 1.6;\n        }\n        .log-entry {\n            color: #e0e0e0;\n            margin-bottom: 10px;\n            padding: 10px;\n            border-radius: 5px;\n            border-left: 4px solid #444;\n            background: rgba(255,255,255,0.02);\n        }\n        .log-info {\n            border-left-color: #3498db;\n            background: rgba(52, 152, 219, 0.1);\n        }\n        .log-success {\n            border-left-color: #27ae60;\n            background: rgba(39, 174, 96, 0.1);\n        }\n        .log-error {\n            border-left-color: #e74c3c;\n            background: rgba(231, 76, 60, 0.1);\n        }\n        .log-warning {\n            border-left-color: #f39c12;\n            background: rgba(243, 156, 18, 0.1);\n        }\n        .docker-event {\n            border-left-color: #9b59b6;\n            background: rgba(155, 89, 182, 0.1);\n        }\n        .btn-sm {\n            padding: 8px 16px;\n            font-size: 14px;\n        }\n        .event-details {\n            margin-top: 10px;\n            padding: 10px;\n            background: rgba(255,255,255,0.05);\n            border-radius: 5px;\n            font-size: 12px;\n        }\n        .event-data {\n            color: #bdc3c7;\n            margin-top: 5px;\n        }\n\n        /* Responsive */\n        @media (max-width: 768px) {\n            .status-section {\n                grid-template-columns: 1fr;\n            }\n            .form-row {\n                grid-template-columns: 1fr;\n            }\n            .deployment-actions .btn {\n                display: block;\n                margin: 10px 0;\n            }\n        }\n    </style><script>\n        let eventSource = null;\n        let currentAppId = null;\n        let systemStatus = null;\n\n        // Inicializar página\n        document.addEventListener('DOMContentLoaded', function() {\n            loadSystemStatus();\n            updateStatus('disconnected', 'Desconectado');\n        });\n\n        // Cargar estado del sistema\n        async function loadSystemStatus() {\n            try {\n                const response = await fetch('/api/unified/status');\n                const data = await response.json();\n                systemStatus = data.data;\n\n                document.getElementById('preferredRuntime').textContent = systemStatus.runtime.preferred || 'N/A';\n                document.getElementById('availableRuntimes').textContent = systemStatus.runtime.available.join(', ') || 'N/A';\n                document.getElementById('supportedLanguages').textContent = systemStatus.runtime.supported_languages.join(', ') || 'N/A';\n\n                // Actualizar opciones de runtime basado en disponibilidad\n                updateRuntimeOptions(systemStatus.runtime.available);\n\n                addLogEntry('✅ Estado del sistema cargado', 'success');\n            } catch (error) {\n                console.error('Error cargando estado del sistema:', error);\n                addLogEntry('❌ Error cargando estado del sistema', 'error');\n            }\n        }\n\n        // Actualizar opciones de runtime\n        function updateRuntimeOptions(availableRuntimes) {\n            const select = document.getElementById('runtimeType');\n            const options = select.getElementsByTagName('option');\n\n            for (let i = 1; i < options.length; i++) {\n                const option = options[i];\n                const runtimeType = option.value;\n\n                if (availableRuntimes.includes(runtimeType)) {\n                    option.disabled = false;\n                    option.textContent = option.textContent.replace(' (No disponible)', '');\n                } else {\n                    option.disabled = true;\n                    option.textContent = option.textContent + ' (No disponible)';\n                }\n            }\n        }\n\n        // Validar repositorio\n        async function validateRepo() {\n            const repoUrl = document.getElementById('repoUrl').value;\n            if (!repoUrl) {\n                addLogEntry('❌ Por favor ingresa una URL de repositorio', 'error');\n                return;\n            }\n\n            addLogEntry('🔍 Validando repositorio...', 'info');\n\n            try {\n                // Simulación de validación (aquí podrías hacer una llamada real)\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                addLogEntry('✅ Repositorio válido', 'success');\n            } catch (error) {\n                addLogEntry('❌ Error validando repositorio', 'error');\n            }\n        }\n\n        // Actualizar estado de conexión\n        function updateStatus(status, text) {\n            const indicator = document.getElementById('statusIndicator');\n            const statusText = document.getElementById('statusText');\n\n            indicator.className = 'status-indicator status-' + status;\n            statusText.textContent = text;\n        }\n\n        // Agregar entrada de log\n        function addLogEntry(message, type = 'info', data = null) {\n            const logsContent = document.getElementById('logsContent');\n            const logEntry = document.createElement('div');\n            logEntry.className = `log-entry log-${type}`;\n\n            const timestamp = new Date().toLocaleTimeString();\n            let content = `<strong>⏰ ${timestamp}</strong> - ${message}`;\n\n            if (data) {\n                content += `<div class=\"event-details\">\n                    <div class=\"event-data\"><strong>Datos:</strong> ${JSON.stringify(data, null, 2)}</div>\n                </div>`;\n            }\n\n            logEntry.innerHTML = content;\n            logsContent.appendChild(logEntry);\n            logsContent.scrollTop = logsContent.scrollHeight;\n        }\n\n        // Limpiar logs\n        function clearLogs() {\n            const logsContent = document.getElementById('logsContent');\n            logsContent.innerHTML = '';\n            addLogEntry('🗑️ Logs limpiados', 'info');\n        }\n\n        // Exportar logs\n        function exportLogs() {\n            const logs = document.getElementById('logsContent').innerText;\n            const blob = new Blob([logs], { type: 'text/plain' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `diplo-logs-${new Date().toISOString().split('T')[0]}.txt`;\n            a.click();\n            URL.revokeObjectURL(url);\n            addLogEntry('📥 Logs exportados', 'success');\n        }\n\n        // Conectar SSE\n        function connectSSE() {\n            if (eventSource) {\n                eventSource.close();\n            }\n\n            updateStatus('connecting', 'Conectando...');\n\n            if (!currentAppId) {\n                addLogEntry('Error: No hay una aplicación activa. Inicia un deployment primero.', 'error');\n                updateStatus('disconnected', 'Sin aplicación');\n                return;\n            }\n\n            eventSource = new EventSource(`/api/v1/apps/${currentAppId}/logs`);\n\n            eventSource.onopen = function() {\n                updateStatus('connected', 'Conectado');\n                document.getElementById('connectBtn').style.display = 'none';\n                document.getElementById('disconnectBtn').style.display = 'inline-block';\n                addLogEntry('✅ Conexión SSE establecida', 'success');\n            };\n\n            eventSource.onmessage = function(event) {\n                try {\n                    const data = JSON.parse(event.data);\n\n                    if (data.type === 'docker_event') {\n                        addLogEntry(`🐳 ${data.message}`, 'docker-event', data.data);\n                    } else if (data.type === 'log') {\n                        addLogEntry(`📝 ${data.message}`, 'info');\n                    } else if (data.type === 'success') {\n                        addLogEntry(`✅ ${data.message}`, 'success');\n                    } else if (data.type === 'error') {\n                        addLogEntry(`❌ ${data.message}`, 'error');\n                    } else if (data.type === 'warning') {\n                        addLogEntry(`⚠️ ${data.message}`, 'warning');\n                    } else {\n                        addLogEntry(`ℹ️ ${data.message}`, 'info');\n                    }\n                } catch (error) {\n                    addLogEntry(`Error parseando evento: ${error.message}`, 'error');\n                }\n            };\n\n            eventSource.onerror = function() {\n                updateStatus('disconnected', 'Error de conexión');\n                addLogEntry('❌ Error en la conexión SSE', 'error');\n            };\n        }\n\n        // Desconectar SSE\n        function disconnectSSE() {\n            if (eventSource) {\n                eventSource.close();\n                eventSource = null;\n            }\n            updateStatus('disconnected', 'Desconectado');\n            document.getElementById('connectBtn').style.display = 'inline-block';\n            document.getElementById('disconnectBtn').style.display = 'none';\n            addLogEntry('🔌 Conexión SSE cerrada', 'info');\n        }\n\n        // Funciones para Variables de Entorno\n        function addEnvVar() {\n            const container = document.getElementById('envVarsContainer');\n            const row = document.createElement('div');\n            row.className = 'env-var-row';\n            row.innerHTML = `\n                <input type=\"text\" placeholder=\"NOMBRE_VARIABLE\" class=\"env-key\">\n                <input type=\"text\" placeholder=\"valor\" class=\"env-value\">\n                <button onclick=\"removeEnvVar(this)\" class=\"btn btn-danger btn-sm\">❌</button>\n            `;\n            container.appendChild(row);\n        }\n\n        function removeEnvVar(button) {\n            const row = button.parentElement;\n            row.remove();\n        }\n\n        function clearEnvVars() {\n            const container = document.getElementById('envVarsContainer');\n            container.innerHTML = `\n                <div class=\"env-var-row\">\n                    <input type=\"text\" placeholder=\"NOMBRE_VARIABLE\" class=\"env-key\">\n                    <input type=\"text\" placeholder=\"valor\" class=\"env-value\">\n                    <button onclick=\"removeEnvVar(this)\" class=\"btn btn-danger btn-sm\">❌</button>\n                </div>\n            `;\n        }\n\n        function getEnvVars() {\n            const rows = document.querySelectorAll('.env-var-row');\n            const envVars = [];\n\n            rows.forEach(row => {\n                const key = row.querySelector('.env-key').value.trim();\n                const value = row.querySelector('.env-value').value.trim();\n\n                if (key && value) {\n                    envVars.push({\n                        name: key,\n                        value: value\n                    });\n                }\n            });\n\n            return envVars;\n        }\n\n        // Iniciar deployment\n        async function startDeployment() {\n            const appName = document.getElementById('appName').value;\n            const repoUrl = document.getElementById('repoUrl').value;\n            const runtimeType = document.getElementById('runtimeType').value;\n            const languageHint = document.getElementById('languageHint').value;\n            const envVars = getEnvVars();\n\n            if (!appName || !repoUrl) {\n                addLogEntry('❌ Por favor completa todos los campos requeridos', 'error');\n                return;\n            }\n\n            const deployBtn = document.getElementById('deployBtn');\n            deployBtn.disabled = true;\n            deployBtn.textContent = '🔄 Deployando...';\n\n            addLogEntry('🚀 Iniciando deployment...', 'info');\n            if (envVars.length > 0) {\n                addLogEntry(`🔧 Variables de entorno configuradas: ${envVars.length}`, 'info');\n            }\n\n            try {\n                const payload = {\n                    name: appName,\n                    repo_url: repoUrl,\n                    env_vars: envVars\n                };\n\n                if (runtimeType) {\n                    payload.runtime_type = runtimeType;\n                }\n\n                if (languageHint) {\n                    payload.language = languageHint;\n                }\n\n                const response = await fetch('/api/v1/deploy', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(payload)\n                });\n\n                const result = await response.json();\n\n                if (response.ok) {\n                    currentAppId = result.data.id;\n                    addLogEntry(`✅ Deployment iniciado: ${result.data.id}`, 'success');\n                    addLogEntry(`🎯 Runtime seleccionado: ${result.data.runtime_type}`, 'info');\n                    if (result.data.env_vars > 0) {\n                        addLogEntry(`🔧 Variables de entorno aplicadas: ${result.data.env_vars}`, 'success');\n                    }\n\n                    // Auto-conectar SSE\n                    setTimeout(() => {\n                        connectSSE();\n                    }, 1000);\n                } else {\n                    addLogEntry(`❌ Error en deployment: ${result.message}`, 'error');\n                }\n            } catch (error) {\n                addLogEntry(`❌ Error de conexión: ${error.message}`, 'error');\n            } finally {\n                deployBtn.disabled = false;\n                deployBtn.textContent = '🚀 Iniciar Deployment';\n            }\n        }\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
